# -*- codeing:UTF-8 -*-
import os, shutil, sys
import pymysql
import time
from datetime import datetime,timedelta
import subprocess
import shutil
import json
import numpy
from operator import itemgetter
from PIL import Image
import traceback

SPECIES_PRED_S = 1
SPECIES_PRED_S1 = 2

ANALYSIS_STANBY = 0
ANALYSIS_TRY = 1
ANALYSIS_RETRY = 2
ANALYSIS_STOP = 5
ANALYSIS_ERROR = 6
ANALYSIS_FILEERROR = 7
ANALYSIS_RUNNIG = 10
ANALYSIS_STEP1_END = 20
ANALYSIS_STEP2_END = 30
ANALYSIS_STEP3_END = 40
ANALYSIS_STEP4_END = 50
ANALYSIS_FINISH = 99

LINEAGE_SEQ = 'GCCCGCGTGCGGCCGCAGGAGCTCGAGACGCCCCACAGGCTCCGGGCGTGTTGTGCGCCTGCCGAACCCCGCGCGACTCTGGGCCTCTTGGGCGGGGGGGGCTCGGGGCCGGGGGCGGGGGGCGGGCCCCGGGGGGCGGGGCCAGCCCCCCCGGCCGAAAGCAACCGTGGTAACGTGC'

LINEAGE_MARK = [{'Idx':0,'Pos':615938,'Ref':'G'},{'Idx':1,'Pos':763886,'Ref':'C'},{'Idx':2,'Pos':4407873,'Ref':'C'},{'Idx':3,'Pos':765171,'Ref':'C'},{'Idx':4,'Pos':4404247,'Ref':'G'}
               ,{'Idx':5,'Pos':529363,'Ref':'C'},{'Idx':6,'Pos':3021283,'Ref':'G'},{'Idx':7,'Pos':1750465,'Ref':'T'},{'Idx':8,'Pos':3216553,'Ref':'G'},{'Idx':9,'Pos':6124,'Ref':'C'}
               ,{'Idx':10,'Pos':2622402,'Ref':'G'},{'Idx':11,'Pos':1491275,'Ref':'G'},{'Idx':12,'Pos':4407780,'Ref':'C'},{'Idx':13,'Pos':403481,'Ref':'C'},{'Idx':14,'Pos':285096,'Ref':'G'}
               ,{'Idx':15,'Pos':2738352,'Ref':'C'},{'Idx':16,'Pos':1136017,'Ref':'A'},{'Idx':17,'Pos':590595,'Ref':'G'},{'Idx':18,'Pos':528781,'Ref':'G'},{'Idx':19,'Pos':2737201,'Ref':'A'}
               ,{'Idx':20,'Pos':2763624,'Ref':'G'},{'Idx':21,'Pos':1245275,'Ref':'C'},{'Idx':22,'Pos':61842,'Ref':'T'},{'Idx':23,'Pos':282892,'Ref':'C'},{'Idx':24,'Pos':497491,'Ref':'G'}
               ,{'Idx':25,'Pos':1834177,'Ref':'A'},{'Idx':26,'Pos':4308395,'Ref':'G'},{'Idx':27,'Pos':648465,'Ref':'A'},{'Idx':28,'Pos':1881090,'Ref':'C'},{'Idx':29,'Pos':2505085,'Ref':'G'}
               ,{'Idx':30,'Pos':4243460,'Ref':'C'},{'Idx':31,'Pos':892416,'Ref':'C'},{'Idx':32,'Pos':797736,'Ref':'C'},{'Idx':33,'Pos':2078246,'Ref':'C'},{'Idx':34,'Pos':1947282,'Ref':'A'}
               ,{'Idx':35,'Pos':4248115,'Ref':'C'},{'Idx':36,'Pos':1692069,'Ref':'A'},{'Idx':37,'Pos':3836274,'Ref':'G'},{'Idx':38,'Pos':346693,'Ref':'G'},{'Idx':39,'Pos':342873,'Ref':'C'}
               ,{'Idx':40,'Pos':762434,'Ref':'T'},{'Idx':41,'Pos':3273107,'Ref':'C'},{'Idx':42,'Pos':958362,'Ref':'C'},{'Idx':43,'Pos':1084911,'Ref':'G'},{'Idx':44,'Pos':1591545,'Ref':'G'}
               ,{'Idx':45,'Pos':3722702,'Ref':'G'},{'Idx':46,'Pos':1237818,'Ref':'C'},{'Idx':47,'Pos':2874344,'Ref':'G'},{'Idx':48,'Pos':4326176,'Ref':'T'},{'Idx':49,'Pos':17842,'Ref':'G'}
               ,{'Idx':50,'Pos':763031,'Ref':'T'},{'Idx':51,'Pos':931123,'Ref':'T'},{'Idx':52,'Pos':2825466,'Ref':'G'},{'Idx':53,'Pos':4407588,'Ref':'T'},{'Idx':54,'Pos':62657,'Ref':'G'}
               ,{'Idx':55,'Pos':514245,'Ref':'C'},{'Idx':56,'Pos':1006080,'Ref':'G'},{'Idx':57,'Pos':1850119,'Ref':'C'},{'Idx':58,'Pos':4240897,'Ref':'C'},{'Idx':59,'Pos':541048,'Ref':'T'}
               ,{'Idx':60,'Pos':1109535,'Ref':'G'},{'Idx':61,'Pos':4229087,'Ref':'C'},{'Idx':62,'Pos':286300,'Ref':'C'},{'Idx':63,'Pos':4269540,'Ref':'G'},{'Idx':64,'Pos':891756,'Ref':'A'}
               ,{'Idx':65,'Pos':3147742,'Ref':'A'},{'Idx':66,'Pos':760115,'Ref':'C'},{'Idx':67,'Pos':107794,'Ref':'C'},{'Idx':68,'Pos':342340,'Ref':'C'},{'Idx':69,'Pos':2488724,'Ref':'C'}
               ,{'Idx':70,'Pos':4404313,'Ref':'G'},{'Idx':71,'Pos':1564799,'Ref':'C'},{'Idx':72,'Pos':58786,'Ref':'G'},{'Idx':73,'Pos':1466779,'Ref':'C'},{'Idx':74,'Pos':2411730,'Ref':'G'}
               ,{'Idx':75,'Pos':783601,'Ref':'A'},{'Idx':76,'Pos':870187,'Ref':'C'},{'Idx':77,'Pos':353766,'Ref':'T'},{'Idx':78,'Pos':1487796,'Ref':'C'},{'Idx':79,'Pos':1455780,'Ref':'T'}
               ,{'Idx':80,'Pos':611463,'Ref':'G'},{'Idx':81,'Pos':1880850,'Ref':'G'},{'Idx':82,'Pos':2156847,'Ref':'G'},{'Idx':83,'Pos':764995,'Ref':'C'},{'Idx':84,'Pos':1452071,'Ref':'C'}
               ,{'Idx':85,'Pos':3073868,'Ref':'T'},{'Idx':86,'Pos':615614,'Ref':'C'},{'Idx':87,'Pos':825585,'Ref':'T'},{'Idx':88,'Pos':1647807,'Ref':'T'},{'Idx':89,'Pos':3414791,'Ref':'G'}
               ,{'Idx':90,'Pos':4316114,'Ref':'G'},{'Idx':91,'Pos':784581,'Ref':'G'},{'Idx':92,'Pos':3388166,'Ref':'C'},{'Idx':93,'Pos':403364,'Ref':'G'},{'Idx':94,'Pos':2077253,'Ref':'G'}
               ,{'Idx':95,'Pos':2518919,'Ref':'G'},{'Idx':96,'Pos':1297327,'Ref':'G'},{'Idx':97,'Pos':3977226,'Ref':'G'},{'Idx':98,'Pos':1274335,'Ref':'G'},{'Idx':99,'Pos':4398141,'Ref':'G'}
               ,{'Idx':100,'Pos':784440,'Ref':'G'},{'Idx':101,'Pos':1132368,'Ref':'C'},{'Idx':102,'Pos':225495,'Ref':'T'},{'Idx':103,'Pos':1502120,'Ref':'C'},{'Idx':104,'Pos':4307886,'Ref':'G'}
               ,{'Idx':105,'Pos':2905505,'Ref':'G'},{'Idx':106,'Pos':4151558,'Ref':'G'},{'Idx':107,'Pos':355181,'Ref':'G'},{'Idx':108,'Pos':15036,'Ref':'C'},{'Idx':109,'Pos':342201,'Ref':'C'}
               ,{'Idx':110,'Pos':2694560,'Ref':'G'},{'Idx':111,'Pos':4249012,'Ref':'G'},{'Idx':112,'Pos':985287,'Ref':'G'},{'Idx':113,'Pos':4246508,'Ref':'G'},{'Idx':114,'Pos':7892,'Ref':'G'}
               ,{'Idx':115,'Pos':620029,'Ref':'C'},{'Idx':116,'Pos':1719757,'Ref':'G'},{'Idx':117,'Pos':18091,'Ref':'G'},{'Idx':118,'Pos':3466426,'Ref':'G'},{'Idx':119,'Pos':4260268,'Ref':'G'}
               ,{'Idx':120,'Pos':874787,'Ref':'G'},{'Idx':121,'Pos':4406749,'Ref':'G'},{'Idx':122,'Pos':1098698,'Ref':'C'},{'Idx':123,'Pos':1501468,'Ref':'G'},{'Idx':124,'Pos':4125058,'Ref':'G'}
               ,{'Idx':125,'Pos':4260742,'Ref':'G'},{'Idx':126,'Pos':896119,'Ref':'C'},{'Idx':127,'Pos':3570528,'Ref':'C'},{'Idx':128,'Pos':4242883,'Ref':'C'},{'Idx':129,'Pos':2875883,'Ref':'C'}
               ,{'Idx':130,'Pos':4326739,'Ref':'G'},{'Idx':131,'Pos':4328004,'Ref':'G'},{'Idx':132,'Pos':734562,'Ref':'G'},{'Idx':133,'Pos':4236903,'Ref':'G'},{'Idx':134,'Pos':17665,'Ref':'G'}
               ,{'Idx':135,'Pos':716918,'Ref':'G'},{'Idx':136,'Pos':4249732,'Ref':'C'},{'Idx':137,'Pos':1130526,'Ref':'G'},{'Idx':138,'Pos':3836739,'Ref':'G'},{'Idx':139,'Pos':2914906,'Ref':'G'}
               ,{'Idx':140,'Pos':2417281,'Ref':'G'},{'Idx':141,'Pos':8135,'Ref':'C'},{'Idx':142,'Pos':616408,'Ref':'C'},{'Idx':143,'Pos':420008,'Ref':'A'},{'Idx':144,'Pos':1759252,'Ref':'G'}
               ,{'Idx':145,'Pos':4242643,'Ref':'C'},{'Idx':146,'Pos':8978,'Ref':'C'},{'Idx':147,'Pos':119600,'Ref':'C'},{'Idx':148,'Pos':9566,'Ref':'C'},{'Idx':149,'Pos':1799921,'Ref':'C'}
               ,{'Idx':150,'Pos':801959,'Ref':'C'},{'Idx':151,'Pos':2859147,'Ref':'C'},{'Idx':152,'Pos':4326928,'Ref':'G'},{'Idx':153,'Pos':982363,'Ref':'G'},{'Idx':154,'Pos':1816587,'Ref':'C'}
               ,{'Idx':155,'Pos':8876,'Ref':'C'},{'Idx':156,'Pos':1137518,'Ref':'G'},{'Idx':157,'Pos':1834916,'Ref':'A'},{'Idx':158,'Pos':1918281,'Ref':'A'},{'Idx':159,'Pos':3878040,'Ref':'A'}
               ,{'Idx':160,'Pos':4240153,'Ref':'G'},{'Idx':161,'Pos':4248073,'Ref':'C'},{'Idx':162,'Pos':4267649,'Ref':'A'},{'Idx':163,'Pos':784143,'Ref':'A'},{'Idx':164,'Pos':1799774,'Ref':'C'}
               ,{'Idx':165,'Pos':3473482,'Ref':'C'},{'Idx':166,'Pos':3837064,'Ref':'G'},{'Idx':167,'Pos':4308411,'Ref':'T'},{'Idx':168,'Pos':221190,'Ref':'G'},{'Idx':169,'Pos':2750052,'Ref':'G'}
               ,{'Idx':170,'Pos':4229470,'Ref':'T'},{'Idx':171,'Pos':2831482,'Ref':'A'},{'Idx':172,'Pos':62768,'Ref':'A'},{'Idx':173,'Pos':4242970,'Ref':'C'},{'Idx':174,'Pos':1834859,'Ref':'G'}
               ,{'Idx':175,'Pos':904090,'Ref':'T'},{'Idx':176,'Pos':44812,'Ref':'G'},{'Idx':177,'Pos':4039853,'Ref':'C'} ]

LINEAGE_DB = [
        {'ID':'1','Seq':'AAACGCGTGCGGCCGCAGGAGCTCGAGACGCCCCACAGGCTCCGGGCGTGCCACGCGCCTGCCGAACCCCGCGCGACTCTGGGCCTCTTGGGCGGGGGGGGCTCGGGGCCGGGGGCGGGGGGCGGGCCCCGGGGGGCGGGGCCGTTCCCCCCGGCCGAAAGCAACCGTGGTAACGTGC'}
        ,{'ID':'1.1','Seq':'AAATACGTGCGGCCGCAGGAGCTCGAGACGCCCCACAGGCTCCGGGCGTGCCACGCGCCTGCCGAACCCCGCGCGACTCTGGGCCTCTTGGGCGGGGGGGGCTCGGGGCCGGGGGCGGGGGGCGGGCCCCGGGGGGCGGGGCCGTTCCCCCCGGCCGAAAGCAACCGTGGTAACGTGC'}
        ,{'ID':'1.1.1','Seq':'AAATATATGCGGCCGCAGGAGCTCGAGACGCCCCACAGGCTCCGGGCGTGCCACGCGCCTGCCGAACCCCGCGCGACTCTGGGCCTCTTGGGCGGGGGGGGCTCGGGGCCGGGGGCGGGGGGCGGGCCCCGGGGGGCGGGGCCGTTCCCCCCGGCCGAAAGCAACCGTGGTAACGTGC'}
        ,{'ID':'1.1.1.1','Seq':'AAATATACACGGCCGCAGGAGCTCGAGACGCCCCACAGGCTCCGGGCGTGCCACGCGCCTGCCGAACCCCGCGCGACTCTGGGCCTCTTGGGCGGGGGGGGCTCGGGGCCGGGGGCGGGGGGCGGGCCCCGGGGGGCGGGGCCGTTCCCCCCGGCCGAAAGCAACCGTGGTAACGTGC'}
        ,{'ID':'1.1.2','Seq':'AAATACGTGTAGCCGCAGGAGCTCGAGACGCCCCACAGGCTCCGGGCGTGCCACGCGCCTGCCGAACCCCGCGCGACTCTGGGCCTCTTGGGCGGGGGGGGCTCGGGGCCGGGGGCGGGGGGCGGGCCCCGGGGGGCGGGGCCGTTCCCCCCGGCCGAAAGCAACCGTGGTAACGTGC'}
        ,{'ID':'1.1.3','Seq':'AAATACGTGCGATCGCAGGAGCTCGAGACGCCCCACAGGCTCCGGGCGTGCCACGCGCCTGCCGAACCCCGCGCGACTCTGGGCCTCTTGGGCGGGGGGGGCTCGGGGCCGGGGGCGGGGGGCGGGCCCCGGGGGGCGGGGCCGTTCCCCCCGGCCGAAAGCAACCGTGGTAACGTGC'}
        ,{'ID':'1.1.3.1','Seq':'AAATACGTGCGATTGCAGGAGCTCGAGACGCCCCACAGGCTCCGGGCGTGCCACGCGCCTGCCGAACCCCGCGCGACTCTGGGCCTCTTGGGCGGGGGGGGCTCGGGGCCGGGGGCGGGGGGCGGGCCCCGGGGGGCGGGGCCGTTCCCCCCGGCCGAAAGCAACCGTGGTAACGTGC'}
        ,{'ID':'1.1.3.2','Seq':'AAATACGTGCGATCTCAGGAGCTCGAGACGCCCCACAGGCTCCGGGCGTGCCACGCGCCTGCCGAACCCCGCGCGACTCTGGGCCTCTTGGGCGGGGGGGGCTCGGGGCCGGGGGCGGGGGGCGGGCCCCGGGGGGCGGGGCCGTTCCCCCCGGCCGAAAGCAACCGTGGTAACGTGC'}
        ,{'ID':'1.1.3.3','Seq':'AAATACGTGCGATCGTAGGAGCTCGAGACGCCCCACAGGCTCCGGGCGTGCCACGCGCCTGCCGAACCCCGCGCGACTCTGGGCCTCTTGGGCGGGGGGGGCTCGGGGCCGGGGGCGGGGGGCGGGCCCCGGGGGGCGGGGCCGTTCCCCCCGGCCGAAAGCAACCGTGGTAACGTGC'}
        ,{'ID':'1.2','Seq':'AAACGCGTGCGGCCGCGGGAGCTCGAGACGCCCCACAGGCTCCGGGCGTGCCACGCGCCTGCCGAACCCCGCGCGACTCTGGGCCTCTTGGGCGGGGGGGGCTCGGGGCCGGGGGCGGGGGGCGGGCCCCGGGGGGCGGGGCCGTTCCCCCCGGCCGAAAGCAACCGTGGTAACGTGC'}
        ,{'ID':'1.2.1','Seq':'AAACGCGTGCGGCCGCGAGAGCTCGAGACGCCCCACAGGCTCCGGGCGTGCCACGCGCCTGCCGAACCCCGCGCGACTCTGGGCCTCTTGGGCGGGGGGGGCTCGGGGCCGGGGGCGGGGGGCGGGCCCCGGGGGGCGGGGCCGTTCCCCCCGGCCGAAAGCAACCGTGGTAACGTGC'}
        ,{'ID':'1.2.2','Seq':'AAACGCGTGCGGCCGCGGAAGCTCGAGACGCCCCACAGGCTCCGGGCGTGCCACGCGCCTGCCGAACCCCGCGCGACTCTGGGCCTCTTGGGCGGGGGGGGCTCGGGGCCGGGGGCGGGGGGCGGGCCCCGGGGGGCGGGGCCGTTCCCCCCGGCCGAAAGCAACCGTGGTAACGTGC'}
        ,{'ID':'1.2.2.1','Seq':'AAACGCGTGCGGCCGCGGACGCTCGAGACGCCCCACAGGCTCCGGGCGTGCCACGCGCCTGCCGAACCCCGCGCGACTCTGGGCCTCTTGGGCGGGGGGGGCTCGGGGCCGGGGGCGGGGGGCGGGCCCCGGGGGGCGGGGCCGTTCCCCCCGGCCGAAAGCAACCGTGGTAACGTGC'}
        ,{'ID':'1.3','Seq':'AAACGCGTGCGGCCGCAGGAACTCGAGACGCCCCACAGGCTCCGGGCGTGCCACGCGCCTGCCGAACCCCGCGCGACTCTGGGCCTCTTGGGCGGGGGGGGCTCGGGGCCGGGGGCGGGGGGCGGGCCCCGGGGGGCGGGGCCGTTCCCCCCGGCCGAAAGCAACCGTGGTAACGTGC'}
        ,{'ID':'1.3.1','Seq':'AAACGCGTGCGGCCGCAGGAATTCGAGACGCCCCACAGGCTCCGGGCGTGCCACGCGCCTGCCGAACCCCGCGCGACTCTGGGCCTCTTGGGCGGGGGGGGCTCGGGGCCGGGGGCGGGGGGCGGGCCCCGGGGGGCGGGGCCGTTCCCCCCGGCCGAAAGCAACCGTGGTAACGTGC'}
        ,{'ID':'1.3.2','Seq':'AAACGCGTGCGGCCGCAGGAACCCGAGACGCCCCACAGGCTCCGGGCGTGCCACGCGCCTGCCGAACCCCGCGCGACTCTGGGCCTCTTGGGCGGGGGGGGCTCGGGGCCGGGGGCGGGGGGCGGGCCCCGGGGGGCGGGGCCGTTCCCCCCGGCCGAAAGCAACCGTGGTAACGTGC'}
        ,{'ID':'2','Seq':'GCCCGCGTGCGGCCGCAGGAGCTTACAACGCCCCACAGGCTCCGGGCGTGCCACGCGCCTGCCGAACCCCGCGCGACTCTGGGCCTCTTGGGCGGGGGGGGCTCGGGGCCGGGGGCGGGGGGCGGGCCCCGGGGGGCGGGGCCGTTCCCCCCGGCCGAAAGCAACCGTGGTAACGTGC'}
        ,{'ID':'2.1','Seq':'GCCCGCGTGCGGCCGCAGGAGCTTACAGTGCCCCACAGGCTCCGGGCGTGCCACGCGCCTGCCGAACCCCGCGCGACTCTGGGCCTCTTGGGCGGGGGGGGCTCGGGGCCGGGGGCGGGGGGCGGGCCCCGGGGGGCGGGGCCGTTCCCCCCGGCCGAAAGCAACCGTGGTAACGTGC'}
        ,{'ID':'2.2','Seq':'GCCCGCGTGCGGCCGCAGGAGCTTACAACATTCCACAGGCTCCGGGCGTGCCACGCGCCTGCCGAACCCCGCGCGACTCTGGGCCTCTTGGGCGGGGGGGGCTCGGGGCCGGGGGCGGGGGGCGGGCCCCGGGGGGCGGGGCCGTTCCCCCCGGCCGAAAGCAACCGTGGTAACGTGC'}
        ,{'ID':'2.2.1','Seq':'GCCCGCGTGCGGCCGCAGGAGCTTACAACATTTGACAGGCTCCGGGCGTGCCACGCGCCTGCCGAACCCCGCGCGACTCTGGGCCTCTTGGGCGGGGGGGGCTCGGGGCCGGGGGCGGGGGGCGGGCCCCGGGGGGCGGGGCCGTTCCCCCCGGCCGAAAGCAACCGTGGTAACGTGC'}
        ,{'ID':'2.2.1.1','Seq':'GCCCGCGTGCGGCCGCAGGAGCTTACAACATTTGGTAGGCTCCGGGCGTGCCACGCGCCTGCCGAACCCCGCGCGACTCTGGGCCTCTTGGGCGGGGGGGGCTCGGGGCCGGGGGCGGGGGGCGGGCCCCGGGGGGCGGGGCCGTTCCCCCCGGCCGAAAGCAACCGTGGTAACGTGC'}
        ,{'ID':'2.2.1.2','Seq':'GCCCGCGTGCGGCCGCAGGAGCTTACAACATTTGACGNGCTCCGGGCGTGCCACGCGCCTGCCGAACCCCGCGCGACTCTGGGCCTCTTGGGCGGGGGGGGCTCGGGGCCGGGGGCGGGGGGCGGGCCCCGGGGGGCGGGGCCGTTCCCCCCGGCCGAAAGCAACCGTGGTAACGTGC'}
        ,{'ID':'2.2.2','Seq':'GCCCGCGTGCGGCCGCAGGAGCTTACAACATTCCACAGTCTCCGGGCGTGCCACGCGCCTGCCGAACCCCGCGCGACTCTGGGCCTCTTGGGCGGGGGGGGCTCGGGGCCGGGGGCGGGGGGCGGGCCCCGGGGGGCGGGGCCGTTCCCCCCGGCCGAAAGCAACCGTGGTAACGTGC'}
        ,{'ID':'3','Seq':'GCCCGCGTGCGGCCGCAGGAGCTCGAGACGCCCCACAGGTGACGGGCGTGCCACGCGCCTGCCGAACCCCGCGCGACTCTGGGCCTCTTGGGCGGGGGGGGCTCGGGGCCGGGGGCGGGGGGCGGGCCCCGGGGGGCGGGGCCGTTCCCCCCGGCCGAAAGCAACCGTGGTAACGTGC'}
        ,{'ID':'3.1','Seq':'GCCCGCGTGCGGCCGCAGGAGCTCGAGACGCCCCACAGGTGAGGGGCGTGCCACGCGCCTGCCGAACCCCGCGCGACTCTGGGCCTCTTGGGCGGGGGGGGCTCGGGGCCGGGGGCGGGGGGCGGGCCCCGGGGGGCGGGGCCGTTCCCCCCGGCCGAAAGCAACCGTGGTAACGTGC'}
        ,{'ID':'3.1.1','Seq':'GCCCGCGTGCGGCCGCAGGAGCTCGAGACGCCCCACAGGTGAGATGCGTGCCACGCGCCTGCCGAACCCCGCGCGACTCTGGGCCTCTTGGGCGGGGGGGGCTCGGGGCCGGGGGCGGGGGGCGGGCCCCGGGGGGCGGGGCCGTTCCCCCCGGCCGAAAGCAACCGTGGTAACGTGC'}
        ,{'ID':'3.1.2','Seq':'GCCCGCGTGCGGCCGCAGGAGCTCGAGACGCCCCACAGGTGAGGGCCGTGCCACGCGCCTGCCGAACCCCGCGCGACTCTGGGCCTCTTGGGCGGGGGGGGCTCGGGGCCGGGGGCGGGGGGCGGGCCCCGGGGGGCGGGGCCGTTCCCCCCGGCCGAAAGCAACCGTGGTAACGTGC'}
        ,{'ID':'3.1.2.1','Seq':'GCCCGCGTGCGGCCGCAGGAGCTCGAGACGCCCCACAGGTGAGGGCGGTGCCACGCGCCTGCCGAACCCCGCGCGACTCTGGGCCTCTTGGGCGGGGGGGGCTCGGGGCCGGGGGCGGGGGGCGGGCCCCGGGGGGCGGGGCCGTTCCCCCCGGCCGAAAGCAACCGTGGTAACGTGC'}
        ,{'ID':'3.1.2.2','Seq':'GCCCGCGTGCGGCCGCAGGAGCTCGAGACGCCCCACAGGTGAGGGCCAGGCCACGCGCCTGCCGAACCCCGCGCGACTCTGGGCCTCTTGGGCGGGGGGGGCTCGGGGCCGGGGGCGGGGGGCGGGCCCCGGGGGGCGGGGCCGTTCCCCCCGGCCGAAAGCAACCGTGGTAACGTGC'}
        ,{'ID':'3.2','Seq':'GCCCGCGTGCGGCCGCAGGAGCTCGAGACGCCCCACAGGTGACGGGCGTCCCACGCGCCTGCCGAACCCCGCGCGACTCTGGGCCTCTTGGGCGGGGGGGGCTCGGGGCCGGGGGCGGGGGGCGGGCCCCGGGGGGCGGGGCCGTTCCCCCCGGCCGAAAGCAACCGTGGTAACGTGC'}
        ,{'ID':'4','Seq':'GCCCGCGTGCGGCCGCAGGAGCTCGAGACGCCCCACAGGCTCCGGGCGTGTTGTGCGCCTGCCGAACCCCGCGCGACTCTGGGCCTCTTGGGCGGGGGGGGCTCGGGGCCGGGGGCGGGGGGCGGGCCCCGGGGGGCGGGGCCGTTCCCCCCGGCCGAAAGCAACCGTGGTAACGTGC'}
        ,{'ID':'4.1','Seq':'GCCCGCGTGCGGCCGCAGGAGCTCGAGACGCCCCACAGGCTCCGGGCGTGTTGTACGCCTGCCGAACCCCGCGCGACTCTGGGCCTCTTGGGCGGGGGGGGCTCGGGGCCGGGGGCGGGGGGCGGGCCCCGGGGGGCGGGGCCGTTCCCCCCGGCCGAAAGCAACCGTGGTAACGTGC'}
        ,{'ID':'4.1.1','Seq':'GCCCGCGTGCGGCCGCAGGAGCTCGAGACGCCCCACAGGCTCCGGGCGTGTTGTATGCCTGCCGAACCCCGCGCGACTCTGGGCCTCTTGGGCGGGGGGGGCTCGGGGCCGGGGGCGGGGGGCGGGCCCCGGGGGGCGGGGCCGTTCCCCCCGGCCGAAAGCAACCGTGGTAACGTGC'}
        ,{'ID':'4.1.1.1','Seq':'GCCCGCGTGCGGCCGCAGGAGCTCGAGACGCCCCACAGGCTCCGGGCGTGTTGTATATGTGCCGAACCCCGCGCGACTCTGGGCCTCTTGGGCGGGGGGGGCTCGGGGCCGGGGGCGGGGGGCGGGCCCCGGGGGGCGGGGCCGTTCCCCCCGGCCGAAAGCAACCGTGGTAACGTGC'}
        ,{'ID':'4.1.1.2','Seq':'GCCCGCGTGCGGCCGCAGGAGCTCGAGACGCCCCACAGGCTCCGGGCGTGTTGTATGCCGACCGAACCCCGCGCGACTCTGGGCCTCTTGGGCGGGGGGGGCTCGGGGCCGGGGGCGGGGGGCGGGCCCCGGGGGGCGGGGCCGTTCCCCCCGGCCGAAAGCAACCGTGGTAACGTGC'}
        ,{'ID':'4.1.1.3','Seq':'GCCCGCGTGCGGCCGCAGGAGCTCGAGACGCCCCACAGGCTCCGGGCGTGTTGTATGCCTGTCGAACCCCGCGCGACTCTGGGCCTCTTGGGCGGGGGGGGCTCGGGGCCGGGGGCGGGGGGCGGGCCCCGGGGGGCGGGGCCGTTCCCCCCGGCCGAAAGCAACCGTGGTAACGTGC'}
        ,{'ID':'4.1.1.3.1','Seq':'GCCCGCGTGCGGCCGCAGGAGCTCGAGACGCCCCACAGGCTCCGGGCGTGTTGTATGCCTGTANAACCCCGCGCGACTCTGGGCCTCTTGGGCGGGGGGGGCTCGGGGCCGGGGGCGGGGGGCGGGCCCCGGGGGGCGGGGCCGTTCCCCCCGGCCGAAAGCAACCGTGGTAACGTGC'}
        ,{'ID':'4.1.2','Seq':'GCCCGCGTGCGGCCGCAGGAGCTCGAGACGCCCCACAGGCTCCGGGCGTGTTGTACGCCTGCCGGGCCCCGCGCGACTCTGGGCCTCTTGGGCGGGGGGGGCTCGGGGCCGGGGGCGGGGGGCGGGCCCCGGGGGGCGGGGCCGTTCCCCCCGGCCGAAAGCAACCGTGGTAACGTGC'}
        ,{'ID':'4.1.2.1','Seq':'GCCCGCGTGCGGCCGCAGGAGCTCGAGACGCCCCACAGGCTCCGGGCGTGTTGTACGCCTGCCGGGTTTCGCGCGACTCTGGGCCTCTTGGGCGGGGGGGGCTCGGGGCCGGGGGCGGGGGGCGGGCCCCGGGGGGCGGGGCCGTTCCCCCCGGCCGAAAGCAACCGTGGTAACGTGC'}
        ,{'ID':'4.1.2.1.1','Seq':'GCCCGCGTGCGGCCGCAGGAGCTCGAGACGCCCCACAGGCTCCGGGCGTGTTGTACGCCTGCCGGGTTTGACGCGACTCTGGGCCTCTTGGGCGGGGGGGGCTCGGGGCCGGGGGCGGGGGGCGGGCCCCGGGGGGCGGGGCCGTTCCCCCCGGCCGAAAGCAACCGTGGTAACGTGC'}
        ,{'ID':'4.1.3','Seq':'GCCCGCGTGCGGCCGCAGGAGCTCGAGACGCCCCACAGGCTCCGGGCGTGTTGTACGCCTGCCGAACCCCGTGCGACTCTGGGCCTCTTGGGCGGGGGGGGCTCGGGGCCGGGGGCGGGGGGCGGGCCCCGGGGGGCGGGGCCGTTCCCCCCGGCCGAAAGCAACCGTGGTAACGTGC'}
        ,{'ID':'4.1.4','Seq':'GCCCGCGTGCGGCCGCAGGAGCTCGAGACGCCCCACAGGCTCCGGGCGTGTTGTACGCCTGCCGAACCCCGCCCGACTCTGGGCCTCTTGGGCGGGGGGGGCTCGGGGCCGGGGGCGGGGGGCGGGCCCCGGGGGGCGGGGCCGTTCCCCCCGGCCGAAAGCAACCGTGGTAACGTGC'}
        ,{'ID':'4.2','Seq':'GCCCGCGTGCGGCCGCAGGAGCTCGAGACGCCCCACAGGCTCCGGGCGTGTTGTGCGCCTGCCGAACCCCGCGTCACTCTGGGCCTCTTGGGCGGGGGGGGCTCGGGGCCGGGGGCGGGGGGCGGGCCCCGGGGGGCGGGGCCGTTCCCCCCGGCCGAAAGCAACCGTGGTAACGTGC'}
        ,{'ID':'4.2.1','Seq':'GCCCGCGTGCGGCCGCAGGAGCTCGAGACGCCCCACAGGCTCCGGGCGTGTTGTGCGCCTGCCGAACCCCGCGTCCCTCTGGGCCTCTTGGGCGGGGGGGGCTCGGGGCCGGGGGCGGGGGGCGGGCCCCGGGGGGCGGGGCCGTTCCCCCCGGCCGAAAGCAACCGTGGTAACGTGC'}
        ,{'ID':'4.2.1.1','Seq':'GCCCGCGTGCGGCCGCAGGAGCTCGAGACGCCCCACAGGCTCCGGGCGTGTTGTGCGCCTGCCGAACCCCGCGTCCTTCTGGGCCTCTTGGGCGGGGGGGGCTCGGGGCCGGGGGCGGGGGGCGGGCCCCGGGGGGCGGGGCCGTTCCCCCCGGCCGAAAGCAACCGTGGTAACGTGC'}
        ,{'ID':'4.2.2','Seq':'GCCCGCGTGCGGCCGCAGGAGCTCGAGACGCCCCACAGGCTCCGGGCGTGTTGTGCGCCTGCCGAACCCCGCGTCACCATGGGCCTCTTGGGCGGGGGGGGCTCGGGGCCGGGGGCGGGGGGCGGGCCCCGGGGGGCGGGGCCGTTCCCCCCGGCCGAAAGCAACCGTGGTAACGTGC'}
        ,{'ID':'4.2.2.1','Seq':'GCCCGCGTGCGGCCGCAGGAGCTCGAGACGCCCCACAGGCTCCGGGCGTGTTGTGCGCCTGCCGAACCCCGCGTCACCACGGGCCTCTTGGGCGGGGGGGGCTCGGGGCCGGGGGCGGGGGGCGGGCCCCGGGGGGCGGGGCCGTTCCCCCCGGCCGAAAGCAACCGTGGTAACGTGC'}
        ,{'ID':'4.2.2.2','Seq':'GCCCGCGTGCGGCCGCAGGAGCTCGAGACGCCCCACAGGCTCCGGGCGTGTTGTGCGCCTGCCGAACCCCGCGTCACCATAAACCTCTTGGGCGGGGGGGGCTCGGGGCCGGGGGCGGGGGGCGGGCCCCGGGGGGCGGGGCCGTTCCCCCCGGCCGAAAGCAACCGTGGTAACGTGC'}
        ,{'ID':'4.3','Seq':'GCCCGCGTGCGGCCGCAGGAGCTCGAGACGCCCCACAGGCTCCGGGCGTGTTGTGCGCCTGCCGAACCCCGCGCGACTCTGGGGACCTTGGGCGGGGGGGGCTCGGGGCCGGGGGCGGGGGGCGGGCCCCGGGGGGCGGGGCCGTTCCCCCCGGCCGAAAGCAACCGTGGTAACGTGC'}
        ,{'ID':'4.3.1','Seq':'GCCCGCGTGCGGCCGCAGGAGCTCGAGACGCCCCACAGGCTCCGGGCGTGTTGTGCGCCTGCCGAACCCCGCGCGACTCTGGGGACACTGGGCGGGGGGGGCTCGGGGCCGGGGGCGGGGGGCGGGCCCCGGGGGGCGGGGCCGTTCCCCCCGGCCGAAAGCAACCGTGGTAACGTGC'}
        ,{'ID':'4.3.1.1','Seq':'GCCCGCGTGCGGCCGCAGGAGCTCGAGACGCCCCACAGGCTCCGGGCGTGTTGTGCGCCTGCCGAACCCCGCGCGACTCTGGGGACACCGGGCGGGGGGGGCTCGGGGCCGGGGGCGGGGGGCGGGCCCCGGGGGGCGGGGCCGTTCCCCCCGGCCGAAAGCAACCGTGGTAACGTGC'}
        ,{'ID':'4.3.2','Seq':'GCCCGCGTGCGGCCGCAGGAGCTCGAGACGCCCCACAGGCTCCGGGCGTGTTGTGCGCCTGCCGAACCCCGCGCGACTCTGGGGACCTTCAGCGGGGGGGGCTCGGGGCCGGGGGCGGGGGGCGGGCCCCGGGGGGCGGGGCCGTTCCCCCCGGCCGAAAGCAACCGTGGTAACGTGC'}
        ,{'ID':'4.3.2.1','Seq':'GCCCGCGTGCGGCCGCAGGAGCTCGAGACGCCCCACAGGCTCCGGGCGTGTTGTGCGCCTGCCGAACCCCGCGCGACTCTGGGGACCTTCACGGGGGGGGGCTCGGGGCCGGGGGCGGGGGGCGGGCCCCGGGGGGCGGGGCCGTTCCCCCCGGCCGAAAGCAACCGTGGTAACGTGC'}
        ,{'ID':'4.3.3','Seq':'GCCCGCGTGCGGCCGCAGGAGCTCGAGACGCCCCACAGGCTCCGGGCGTGTTGTGCGCCTGCCGAACCCCGCGCGACTCTGGGGACCTTGGGCAAAGGGGGCTCGGGGCCGGGGGCGGGGGGCGGGCCCCGGGGGGCGGGGCCGTTCCCCCCGGCCGAAAGCAACCGTGGTAACGTGC'}
        ,{'ID':'4.3.4','Seq':'GCCCGCGTGCGGCCGCAGGAGCTCGAGACGCCCCACAGGCTCCGGGCGTGTTGTGCGCCTGCCGAACCCCGCGCGACTCTGGGGACCTTGGGCGGGAAGGGCTCGGGGCCGGGGGCGGGGGGCGGGCCCCGGGGGGCGGGGCCGTTCCCCCCGGCCGAAAGCAACCGTGGTAACGTGC'}
        ,{'ID':'4.3.4.1','Seq':'GCCCGCGTGCGGCCGCAGGAGCTCGAGACGCCCCACAGGCTCCGGGCGTGTTGTGCGCCTGCCGAACCCCGCGCGACTCTGGGGACCTTGGGCGGGAAAAGCTCGGGGCCGGGGGCGGGGGGCGGGCCCCGGGGGGCGGGGCCGTTCCCCCCGGCCGAAAGCAACCGTGGTAACGTGC'}
        ,{'ID':'4.3.4.2','Seq':'GCCCGCGTGCGGCCGCAGGAGCTCGAGACGCCCCACAGGCTCCGGGCGTGTTGTGCGCCTGCCGAACCCCGCGCGACTCTGGGGACCTTGGGCGGGAAGGTTTCGGGGCCGGGGGCGGGGGGCGGGCCCCGGGGGGCGGGGCCGTTCCCCCCGGCCGAAAGCAACCGTGGTAACGTGC'}
        ,{'ID':'4.3.4.2.1','Seq':'GCCCGCGTGCGGCCGCAGGAGCTCGAGACGCCCCACAGGCTCCGGGCGTGTTGTGCGCCTGCCGAACCCCGCGCGACTCTGGGGACCTTGGGCGGGAAGGTTCAGGGGCCGGGGGCGGGGGGCGGGCCCCGGGGGGCGGGGCCGTTCCCCCCGGCCGAAAGCAACCGTGGTAACGTGC'}
        ,{'ID':'4.4','Seq':'GCCCGCGTGCGGCCGCAGGAGCTCGAGACGCCCCACAGGCTCCGGGCGTGTTGTGCGCCTGCCGAACCCCGCGCGACTCTGGGCCTCTTGGGCGGGGGGGGCTCAGGGCCGGGGGCGGGGGGCGGGCCCCGGGGGGCGGGGCCGTTCCCCCCGGCCGAAAGCAACCGTGGTAACGTGC'}
        ,{'ID':'4.4.1','Seq':'GCCCGCGTGCGGCCGCAGGAGCTCGAGACGCCCCACAGGCTCCGGGCGTGTTGTGCGCCTGCCGAACCCCGCGCGACTCTGGGCCTCTTGGGCGGGGGGGGCTCAAAGCCGGGGGCGGGGGGCGGGCCCCGGGGGGCGGGGCCGTTCCCCCCGGCCGAAAGCAACCGTGGTAACGTGC'}
        ,{'ID':'4.4.1.1','Seq':'GCCCGCGTGCGGCCGCAGGAGCTCGAGACGCCCCACAGGCTCCGGGCGTGTTGTGCGCCTGCCGAACCCCGCGCGACTCTGGGCCTCTTGGGCGGGGGGGGCTCAAAACCGGGGGCGGGGGGCGGGCCCCGGGGGGCGGGGCCGTTCCCCCCGGCCGAAAGCAACCGTGGTAACGTGC'}
        ,{'ID':'4.4.1.1.1','Seq':'GCCCGCGTGCGGCCGCAGGAGCTCGAGACGCCCCACAGGCTCCGGGCGTGTTGTGCGCCTGCCGAACCCCGCGCGACTCTGGGCCTCTTGGGCGGGGGGGGCTCAAAAGCGGGGGCGGGGGGCGGGCCCCGGGGGGCGGGGCCGTTCCCCCCGGCCGAAAGCAACCGTGGTAACGTGC'}
        ,{'ID':'4.4.1.2','Seq':'GCCCGCGTGCGGCCGCAGGAGCTCGAGACGCCCCACAGGCTCCGGGCGTGTTGTGCGCCTGCCGAACCCCGCGCGACTCTGGGCCTCTTGGGCGGGGGGGGCTCAAAGCGCAGGGCGGGGGGCGGGCCCCGGGGGGCGGGGCCGTTCCCCCCGGCCGAAAGCAACCGTGGTAACGTGC'}
        ,{'ID':'4.4.2','Seq':'GCCCGCGTGCGGCCGCAGGAGCTCGAGACGCCCCACAGGCTCCGGGCGTGTTGTGCGCCTGCCGAACCCCGCGCGACTCTGGGCCTCTTGGGCGGGGGGGGCTCAGGGCCGGAAGCGGGGGGCGGGCCCCGGGGGGCGGGGCCGTTCCCCCCGGCCGAAAGCAACCGTGGTAACGTGC'}
        ,{'ID':'4.5','Seq':'GCCCGCGTGCGGCCGCAGGAGCTCGAGACGCCCCACAGGCTCCGGGCGTGTTGTGCGCCTGCCGAACCCCGCGCGACTCTGGGCCTCTTGGGCGGGGGGGGCTCGGGGCCGGGGATTGGGGGCGGGCCCCGGGGGGCGGGGCCGTTCCCCCCGGCCGAAAGCAACCGTGGTAACGTGC'}
        ,{'ID':'4.6','Seq':'GCCCGCGTGCGGCCGCAGGAGCTCGAGACGCCCCACAGGCTCCGGGCGTGTTGTGCGCCTGCCGAACCCCGCGCGACTCTGGGCCTCTTGGGCGGGGGGGGCTCGGGGCCGGGGGCGAAGGGCGGGCCCCGGGGGGCGGGGCCGTTCCCCCCGGCCGAAAGCAACCGTGGTAACGTGC'}
        ,{'ID':'4.6.1','Seq':'GCCCGCGTGCGGCCGCAGGAGCTCGAGACGCCCCACAGGCTCCGGGCGTGTTGTGCGCCTGCCGAACCCCGCGCGACTCTGGGCCTCTTGGGCGGGGGGGGCTCGGGGCCGGGGGCGAACGGCGGGCCCCGGGGGGCGGGGCCGTTCCCCCCGGCCGAAAGCAACCGTGGTAACGTGC'}
        ,{'ID':'4.6.1.1','Seq':'GCCCGCGTGCGGCCGCAGGAGCTCGAGACGCCCCACAGGCTCCGGGCGTGTTGTGCGCCTGCCGAACCCCGCGCGACTCTGGGCCTCTTGGGCGGGGGGGGCTCGGGGCCGGGGGCGAACAACGGGCCCCGGGGGGCGGGGCCGTTCCCCCCGGCCGAAAGCAACCGTGGTAACGTGC'}
        ,{'ID':'4.6.1.2','Seq':'GCCCGCGTGCGGCCGCAGGAGCTCGAGACGCCCCACAGGCTCCGGGCGTGTTGTGCGCCTGCCGAACCCCGCGCGACTCTGGGCCTCTTGGGCGGGGGGGGCTCGGGGCCGGGGGCGAACGGGCGGCCCCGGGGGGCGGGGCCGTTCCCCCCGGCCGAAAGCAACCGTGGTAACGTGC'}
        ,{'ID':'4.6.2','Seq':'GCCCGCGTGCGGCCGCAGGAGCTCGAGACGCCCCACAGGCTCCGGGCGTGTTGTGCGCCTGCCGAACCCCGCGCGACTCTGGGCCTCTTGGGCGGGGGGGGCTCGGGGCCGGGGGCGAAGGGCGCACCCCGGGGGGCGGGGCCGTTCCCCCCGGCCGAAAGCAACCGTGGTAACGTGC'}
        ,{'ID':'4.6.2.1','Seq':'GCCCGCGTGCGGCCGCAGGAGCTCGAGACGCCCCACAGGCTCCGGGCGTGTTGTGCGCCTGCCGAACCCCGCGCGACTCTGGGCCTCTTGGGCGGGGGGGGCTCGGGGCCGGGGGCGAAGGGCGCATGTCGGGGGGCGGGGCCGTTCCCCCCGGCCGAAAGCAACCGTGGTAACGTGC'}
        ,{'ID':'4.6.2.2','Seq':'GCCCGCGTGCGGCCGCAGGAGCTCGAGACGCCCCACAGGCTCCGGGCGTGTTGTGCGCCTGCCGAACCCCGCGCGACTCTGGGCCTCTTGGGCGGGGGGGGCTCGGGGCCGGGGGCGAAGGGCGCACCCTCAGGGGCGGGGCCGTTCCCCCCGGCCGAAAGCAACCGTGGTAACGTGC'}
        ,{'ID':'4.6.3','Seq':'GCCCGCGTGCGGCCGCAGGAGCTCGAGACGCCCCACAGGCTCCGGGCGTGTTGTGCGCCTGCCGAACCCCGCGCGACTCTGGGCCTCTTGGGCGGGGGGGGCTCGGGGCCGGGGGCGAAGGGCGGGCCCCGGAGGGCGGGGCCGTTCCCCCCGGCCGAAAGCAACCGTGGTAACGTGC'}
        ,{'ID':'4.6.4','Seq':'GCCCGCGTGCGGCCGCAGGAGCTCGAGACGCCCCACAGGCTCCGGGCGTGTTGTGCGCCTGCCGAACCCCGCGCGACTCTGGGCCTCTTGGGCGGGGGGGGCTCGGGGCCGGGGGCGAAGGGCGGGCCCCGGGAGGCGGGGCCGTTCCCCCCGGCCGAAAGCAACCGTGGTAACGTGC'}
        ,{'ID':'4.6.5','Seq':'GCCCGCGTGCGGCCGCAGGAGCTCGAGACGCCCCACAGGCTCCGGGCGTGTTGTGCGCCTGCCGAACCCCGCGCGACTCTGGGCCTCTTGGGCGGGGGGGGCTCGGGGCCGGGGGCGAAGGGCGCGCCCCGGGGAGCGGGGCCGTTCCCCCCGGCCGAAAGCAACCGTGGTAACGTGC'}
        ,{'ID':'4.7','Seq':'GCCCGCGTGCGGCCGCAGGAGCTCGAGACGCCCCACAGGCTCCGGGCGTGTTGTGCGCCTGCCGAACCCCGCGCGACTCTGGGCCTCTTGGGCGGGGGGGGCTCGGGGCCGGGGGCGGGGGGCGGGCCCCGGGGGAGGGGGCCGTTCCCCCCGGCCGAAAGCAACCGTGGTAACGTGC'}
        ,{'ID':'4.8','Seq':'GCCCGCGTGCGGCCGCAGGAGCTCGAGACGCCCCACAGGCTCCGGGCGTGTTGTGCGCCTGCCGAACCCCGCGCGACTCTGGGCCTCTTGGGCGGGGGGGGCTCGGGGCCGGGGGCGGGGGGCGGGCCCCGGGGGGCAAGGCCGTTCCCCCCGGCCGAAAGCAACCGTGGTAACGTGC'}
        ,{'ID':'4.8.1','Seq':'GCCCGCGTGCGGCCGCAGGAGCTCGAGACGCCCCACAGGCTCCGGGCGTGTTGTGCGCCTGCCGAACCCCGCGCGACTCTGGGCCTCTTGGGCGGGGGGGGCTCGGGGCCGGGGGCGGGGGGCGGGCCCCGGGGGGCAACGCCGTTCCCCCCGGCCGAAAGCAACCGTGGTAACGTGC'}
        ,{'ID':'4.8.2','Seq':'GCCCGCGTGCGGCCGCAGGAGCTCGAGACGCCCCACAGGCTCCGGGCGTGTTGTGCGCCTGCCGAACCCCGCGCGACTCTGGGCCTCTTGGGCGGGGGGGGCTCGGGGCCGGGGGCGGGGGGCGGGCCCCGGGGGGCAAGATCGTTCCCCCCGGCCGAAAGCAACCGTGGTAACGTGC'}
        ,{'ID':'4.9.1','Seq':'GCCCGCGTGCGGCCGCAGGAGCTCGAGACGCCCCACAGGCTCCGGGCGTGTTGTGCGCCTGCCGAACCCCGCGCGACTCTGGGCCTCTTGGGCGGGGGGGGCTCGGGGCCGGGGGCGGGGGGCGGGCCCCGGGGGGCGGGGCCAGCTGCCCCGGCCGAAAGCAACCGTGGTAACGTGC'}
        ,{'ID':'4.8.3','Seq':'GCCCGCGTGCGGCCGCAGGAGCTCGAGACGCCCCACAGGCTCCGGGCGTGTTGTGCGCCTGCCGAACCCCGCGCGACTCTGGGCCTCTTGGGCGGGGGGGGCTCGGGGCCGGGGGCGGGGGGCGGGCCCCGGGGGGCAAGGCGGTTCCCCCCGGCCGAAAGCAACCGTGGTAACGTGC'}
        ,{'ID':'4.9','Seq':'GCCCGCGTGCGGCCGCAGGAGCTCGAGACGCCCCACAGGCTCCGGGCGTGTTGTGCGCCTGCCGAACCCCGCGCGACTCTGGGCCTCTTGGGCGGGGGGGGCTCGGGGCCGGGGGCGGGGGGCGGGCCCCGGGGGGCGGGGCCAGCCCCCCCGGCCGAAAGCAACCGTGGTAACGTGC'}
        ,{'ID':'5','Seq':'GCCCGCGTGCGGCCGCAGGAGCTCGAGACGCCCCACAGGCTCCGGGCGTGCCACGCGCCTGCCGAACCCCGCGCGACTCTGGGCCTCTTGGGCGGGGGGGGCTCGGGGCCGGGGGCGGGGGGCGGGCCCCGGGGGGCGGGGCCGTTCCTATTNGCCGAAAGCAACCGTGGTAACGTGC'}
        ,{'ID':'6','Seq':'GCCCGCGTGCGGCCGCAGGAGCTCGAGACGCCCCACAGGCTCCGGGCGTGCCACGCGCCTGCCGAACCCCGCGCGACTCTGGGCCTCTTGGGCGGGGGGGGCTCGGGGCCGGGGGCGGGGGGCGGGCCCCGGGGGGCGGGGCCGTTCCCCCCGTGCGAAAGCAACCGTGGTAACGTGC'}
        ,{'ID':'7','Seq':'GCCCGCGTGCGGCCGCAGGAGCTCGAGACGCCCCACAGGCTCCGGGCGTGCCACGCGCCTGCCGAACCCCGCGCGACTCTGGGCCTCTTGGGCGGGGGGGGCTCGGGGCCGGGGGCGGGGGGCGGGCCCCGGGGGGCGGGGCCGTTCCCCCCGGCTACCGATGCTTAGGGTAACGTGC'}
        ,{'ID':'8','Seq':'GCCCGCGTGCGGCCGCAGGAGCTCGAGACGCCCCACAGGCTCCGGGCGTGCCACGCGCCTGCCGAACCCCGCGCGACTCTGGGCCTCTTGGGCGGGGGGGGCTCGGGGCCGGGGGCGGGGGGCGGGCCCCGGGGGGCGGGGCCGTTCCCCCCGGCCGAAAGCAACCGTTGTAACGTGC'}
        ,{'ID':'Bovis','Seq':'GCCCGCGTGCGGCCGCAGGAGCTCGAGACGCCCCACAGGCTCCGGGCGTGCCACGCGCCTGCCGAACCCCGCGCGACTCTGGGCCTCTTGGGCGGGGGGGGCTCGGGGCCGGGGGCGGGGGGCGGGCCCCGGGGGGCGGGGCCGTTCCCCCCGGCCGAAAGCAACCGTGGCGGTATGC'}
        ,{'ID':'Caprae','Seq':'GCCCGCGTGCGGCCGCAGGAGCTCGAGACGCCCCACAGGCTCCGGGCGTGCCACGCGCCTGCCGAACCCCGCGCGACTCTGGGCCTCTTGGGCGGGGGGGGCTCGGGGCCGGGGGCGGGGGGCGGGCCCCGGGGGGCGGGGCCGTTCCCCCCGGCCGAAAGCAACCGTGGTAACGCGC'}
        ,{'ID':'Orygis','Seq':'GCCCGCGTGCGGCCGCAGGAGCTCGAGACGCCCCACAGGCTCCGGGCGTGCCACGCGCCTGCCGAACCCCGCGCGACTCTGGGCCTCTTGGGCGGGGGGGGCTCGGGGCCGGGGGCGGGGGGCGGGCCCCGGGGGGCGGGGCCGTTCCCCCCGGCCGAAAGCAACCGTGGTAACGTTT'}
]

def inRange(ref, mn, mx):
    if(ref >= mn) and(ref <= mx):
        return True
    else:
        return False
        
class AnalyzerClass():
    def __init__(self):
        self.cpucnt = 16
        self.sampleno = '0'  # sample idx string
        self.userno = '-1'   # user idx
        self.r1Name = ''    # R1 filename
        self.r2Name = ''    # R2 filename
        self.MtuberculosisOK = False
        self.stepno = 0     # step number
        self.starttm = datetime.now()   # start time
        self.endtm = datetime.now()     # end time
        self.checktm = datetime.now().date() # date time check
        self.ErrorTriger = False
        self.anaysiscfg = {'ReadMapping_IntralControlOP': 'True',
                            'refDB':'WTO_DB_20220821',
                            'Kraken2_minbaseQulity': '1',
                            'Kraken2_minhitGroups': '3',
                            'Braken_OptionR': '100',
                            'BcfToolsQualitySymbol': '<=',
                            'BcfToolsQualityValue': '100',
                            'BcfToolsDpSymbol': '<=',
                            'BcfToolsDpValue': '50',
                            'SnpEff_ud': '1000'
                            }
                            
        self.tooldir = '/home/jj/tools'
        self.toolpath = self.tooldir + '/'
        self.datadir = os.getcwd()+'/Data'
        self.datapath = self.datadir + '/'
        self.refdir = os.getcwd()+'/Reference'
        self.refpath = self.refdir+'/'
        self.refCustom_hg38_SpikeInpath = self.refpath + 'Custom_hg38_SpikeIn/'
        self.refH37Rvpath = self.toolpath+'snpEff/data/H37Rv/'
        self.refMycobacterium_H37Rvpath = self.refpath + 'Mycobacterium_Tuberculosis_H37Rv/'
        self.refMyoChaseIDDBdir = self.refpath + 'Mycobacterium_DB'    # Univ Myco db
        self.refMyoChaseIDDBpath = self.refMyoChaseIDDBdir + '/'
        self.tempdir = os.getcwd()+'/Temp'
        self.temppath = self.tempdir+'/'
        self.resultpath = self.tempdir+'/result/'
        self.tempsub_dir = ['2_Filtered_Fastq', '3_FastQC', '4_host_genome_filtered', '5_Aligned_Bams', '6_Kraken2', '7_MTBC_Downstream']
        self.tempsub_path = []
        for r, row in enumerate(self.tempsub_dir):
            self.tempsub_dir[r] = self.temppath+row
            self.tempsub_path.append(self.tempsub_dir[r]+'/')
        self.resultpath = self.tempdir+'/result/'
        self.mysql_conn = None
        self.mysql_curs = None
        self.filter_r1_read_count = [0, 0, 0, 0]
        self.hg_filter_r2_read_count = [0, 0, 0, 0]
        self.spikein_depth = [0, 0, 0]
        self.depth_average = [0, 0, 0, 0]   # deep avg, x1, x50, x100
        self.makeCirTb()
        if not os.path.exists(self.datadir):   # Check data directory
            os.makedirs(self.datadir)
        if not os.path.exists(self.refdir):    # Check reference directory
            os.makedirs(self.refdir)
    
    def procrun(self, runproc, tmout=0):
        if self.ErrorTriger:
            return
        
        try:
            if type(runproc) is str:
                os.system(runproc)
            elif type(runproc) is list:
                subprocess.run(runproc, timeout=tmout)
        except Exception as e:
            self.ErrorTriger = True
            self.SetStepTime(ANALYSIS_ERROR)
            print('ERROR MSG : ',e)
            return
        
    def makeCirTb(self):    # Reset circos table
        CIRCOS_BAND = [{'GENE':'gyrB', 'STR':5240, 'END':7267, 'LEN':2028, 'POS':0},{'GENE':'gyrA', 'STR':7302, 'END':9818, 'LEN':2517, 'POS':2028},{'GENE':'rpoB', 'STR':759807, 'END':763325, 'LEN':3519, 'POS':4545},
                {'GENE':'rpsL', 'STR':781560, 'END':781934, 'LEN':375, 'POS':8064},{'GENE':'rplC', 'STR':800809, 'END':801462, 'LEN':654, 'POS':8439},{'GENE':'rrs', 'STR':1471846, 'END':1473382, 'LEN':1537, 'POS':9093},
                {'GENE':'fabG1', 'STR':1673420, 'END':1674183, 'LEN':764, 'POS':10630},{'GENE':'inhA', 'STR':1674202, 'END':1675011, 'LEN':810, 'POS':11394},{'GENE':'tlyA', 'STR':1917940, 'END':1918746, 'LEN':807, 'POS':12204},
                {'GENE':'katG', 'STR':2153889, 'END':2156111, 'LEN':2223, 'POS':13011},{'GENE':'pncA', 'STR':2288681, 'END':2289253, 'LEN':573, 'POS':15234},{'GENE':'eis', 'STR':2714124, 'END':2715369, 'LEN':1246, 'POS':15807},
                {'GENE':'ddn', 'STR':3986844, 'END':3987299, 'LEN':456, 'POS':17053},{'GENE':'embA', 'STR':4243221, 'END':4246517, 'LEN':3297, 'POS':17509},{'GENE':'embB', 'STR':4246518, 'END':4249810, 'LEN':3293, 'POS':20806},
                {'GENE':'ethA', 'STR':4326004, 'END':4327483, 'LEN':1480, 'POS':24099},{'GENE':'gid', 'STR':4407528, 'END':4408202, 'LEN':675, 'POS':25579}]
        self.CircosTb = []
        self.CircosPos = []
        self.WhoAmino_Pos = []
        self.WhoAmino_AA = []
        rno = 0
        for r in CIRCOS_BAND:
            x = {}
            for c in range(r['LEN']):
                self.CircosTb.append({'GENE':r['GENE'], 'IDX':rno, 'POS':c, 'HIS':0})
                self.CircosPos.append(r['STR']+c)
                rno = rno + 1
        
        # check who amino acid change file
        if os.path.exists('who_amino_convert.txt'):
            f = open('who_amino_convert.txt')
            rd = f.readlines()
            for r in rd:
                sp = r.split('\t')
                if len(sp)==3:
                    self.WhoAmino_Pos.append(int(sp[0]))
                    self.WhoAmino_AA.append({'NUC':int(sp[1]), 'AA':int(sp[2])})
            f.close()
            
    def posToCircosPos(self, pos):
        try:
            idx = self.CircosPos.index(int(pos))
            rt = self.CircosTb[idx]['POS']
        except:
            rt = -1
        return rt
        
    def searchWhoAAchange(self, pos):
        try:
            idx = self.WhoAmino_Pos.index(int(pos))
            if len(self.WhoAmino_AA[idx]['AA'])>2:
                rt = str(self.WhoAmino_AA[idx]['AA'])
            else:
                rt = str(self.WhoAmino_AA[idx]['NUC'])
        except:
            rt = ''
            
        return rt
                
                
    def matchCirTb(self):   # Make circos plot
        if self.MtuberculosisOK == False:
            return
        
        depthfile = self.datapath + self.sampleno+'_dup_removed.depth'
        if os.path.exists(depthfile):
            f = open(depthfile,'r')
            rd =  f.readlines()
            pos = []
            his = []
            for txt in rd:
                if( txt.startswith('#CHROM') == False):
                    sp = txt.split('\t')
                    if(len(sp) == 3):
                        pos.append( int(sp[1]) )
                        his.append( int(sp[2]) )
            f.close()
            
            # make histogram file
            f = open(os.path.dirname(depthfile) + '/myco.hist.txt', 'w')
            for rno, col in enumerate(self.CircosPos):
                try:
                    idx = pos.index(col)
                    self.CircosTb[rno]['HIS'] = his[idx]
                except:
                    self.CircosTb[rno]['HIS'] = 0
                    
                cirpos = self.posToCircosPos(col)
                if cirpos >= 0:
                    f.write(self.CircosTb[rno]['GENE']+'\t'+str(cirpos)+'\t'+str(cirpos)+'\t'+str(self.CircosTb[rno]['HIS'])+'\n')
            f.close()
            
            # make mutation value
            sql = "SELECT a.Gene, a.position, a.Necleotide, a.AminoAcid, b.sname, a.sample_id FROM result_tb AS a, \
            	(SELECT * FROM species_tb WHERE (Sample_Id = {0}) AND \
	            (stype = 1) ORDER BY map_read DESC LIMIT 1) AS b \
                WHERE (((amk>0)and(amk<=2)) OR ((bdq>0)and(bdq<=2)) or ((cap>0)and(cap<=2)) or ((cfz>0)and(cfz<=2)) or ((dlm>0)and(dlm<=2))OR \
	            ((emb>0)and(emb<=2)) or ((eto>0)and(eto<=2)) or ((inh>0)and(inh<=2)) or ((kan>0)and(kan<=2))OR ((lfx>0)and(lfx<=2)) or \
	            ((lzd>0)and(lzd<=2)) or ((mfx>0)and(mfx<=2)) or ((pza>0)and(pza<=2)) OR ((rif>0)and(rif<=2)) or ((stm>0)and(stm<=2))) \
	            AND (a.sample_id = b.sample_id)	AND (Sname = 'Mycobacterium tuberculosis')".format(int(self.sampleno))
            self.mysql_conn.commit()
            self.mysql_curs.execute(sql)
            rows = self.mysql_curs.fetchall()
            
            f = open(os.path.dirname(depthfile) + '/myco.text.txt', 'w')
            if (self.mysql_curs.rowcount > 0):
                for row in rows:
                    sgn = row[0]        # gene
                    cirpos = self.posToCircosPos(row[1]) # position
                    aa = self.searchWhoAAchange(row[1]) # Who Amino acid change table list
                    if aa == '':
                        if len(row[3]) > 2: # Check Amino acid
                            aa = sgn+'.'+row[3]    # aminoacid
                        else:
                            aa = sgn+'.'+row[2]    # necleotide
                    f.write(sgn+'\t'+str(cirpos)+'\t'+str(cirpos)+'\t'+aa+'\n')
            f.close()
            
            fileck = os.path.exists(os.getcwd()+'/circos_mk.conf')
            if fileck:
                f = open(os.getcwd()+'/circos_mk.conf','r')
                ctmp = f.readlines()
                circfg =  ' '.join(s for s in ctmp)
                f.close()
                
                imagedata_path = '/home/jj/univ_myco_web/static/circos'
                
                circfg = circfg.replace("[[KARYITYOE_FILE]]",   "/home/jj/tools/circos-0.69-9/mycoLib/MycoChase_karyotype.txt")
                circfg = circfg.replace("[[HOUSEKEEP_FILE]]",   "/home/jj/tools/circos-0.69-9/mycoLib/housekeeping.conf")
                circfg = circfg.replace("[[HIST_FILE]]",        os.path.dirname(depthfile) + '/myco.hist.txt')
                circfg = circfg.replace("[[VARIANT_FILE]]",     os.path.dirname(depthfile) + '/myco.text.txt')
                circfg = circfg.replace("[[COLORPATTERN_FILE]]","/home/jj/tools/circos-0.69-9/etc/colors_fonts_patterns.conf")
                circfg = circfg.replace("[[DATA_DIR]]",         imagedata_path)
                circfg = circfg.replace("[[DATA_FILE]]",        self.sampleno+'.png')

                f = open(os.getcwd()+'/circos.conf','w')
                f.write(circfg)
                f.close()
                
                stmp = 'perl "/home/jj/tools/circos-0.69-9/bin/circos" -conf "' + os.getcwd()+'/circos.conf"'
                os.system(stmp)
                time.sleep(0.5)
                fileck = os.path.exists(imagedata_path+'/'+self.sampleno+'.png')
                if fileck:
                    img = Image.open(imagedata_path+'/'+self.sampleno+'.png')
                    img_resize = img.resize((400, 400))
                    img_resize.save(imagedata_path+'/'+self.sampleno+'.jpg')                    
                
                
    def saveHIS(self, fname):
        if os.path.exists(fname):
            os.remove(fname)
            
        f = open(fname, 'w')
        for r in self.CircosTb:
            s = r['GENE']+'\t'+r['IDX']+'\t'+r['IDX']+'\t'+r['HIS']
            f.write(s+'\n')
        f.close()
        
    def ConnectMysqlDB(self, aIP, aPORT, aDB, aID, aPW):    # MYSQL DB & Table connecting
        try:
            # Myco DB
            self.mysql_conn = pymysql.connect(
                host=aIP, port=aPORT, user=aID, password=aPW, db=aDB, charset='utf8')  # connecti
            self.mysql_curs = self.mysql_conn.cursor()  # cursor connection
            self.mysql_conn.autocommit = True
        except:
            print("MySQL DB connection Error")
            sys.exit()
            
    def GetStatus(self):    # get sample step_no
        sql = 'SELECT Anaysis_stepno FROM sample_tb WHERE (ID = {0})'.format(self.sampleno)
        self.mysql_conn.commit()
        self.mysql_curs.execute(sql)
        rows = self.mysql_curs.fetchall()
        if (self.mysql_curs.rowcount > 0):
            for row in rows:
                sampleno = str(row[0])           # Step number
                self.stepno = 1                       

                return True
        else:        
            return False    # 레코드가 삭제됐음

    def GetData(self):     # get sample data
        sql = 'SELECT a.Id, b.Filename, c.Filename, a.user_id FROM sample_tb AS a, data_tb AS b, data_tb AS c ' +\
            'wHERE (a.Analysis_R1_Data_Id = b.id) AND (a.Analysis_R2_Data_Id = c.id) AND ((a.Analysis_StepNo = 1)or(a.Analysis_StepNo = 2)) ' +\
            'GROUP BY a.Id ' +\
            'ORDER BY a.Id ' +\
            'LIMIT 1'
        self.mysql_conn.commit()
        self.mysql_curs.execute(sql)
        rows = self.mysql_curs.fetchall()
        if (self.mysql_curs.rowcount > 0):
            for row in rows:
                self.sampleno = str(row[0])           # sample index number
                self.r1Name = self.datapath+'__{0}__{1}'.format(row[3],row[1])    # UserID(123) + R1 filename(r1file.fastq.gz) =  __123__r1file.fastq.gz
                self.r2Name = self.datapath+'__{0}__{1}'.format(row[3],row[2])    # UserID(123) + R2 filename(r2file.fastq.gz) =  __123__r2file.fastq.gz
                self.userno = str(row[3])             # User idx id
                self.stepno = 1                       # Step number

                return True
        else:
            self.sampleno = '0'
            self.r1Name = ''
            self.r2Name = ''
            self.userno = '-1'
            self.stepno = 0
            return False

    def SetStepTime(self, stepno):     # Step time set
        if (stepno == ANALYSIS_STEP1_END):
            no = 1
        elif (stepno == ANALYSIS_STEP2_END):
            no = 2
        elif (stepno == ANALYSIS_STEP3_END):
            no = 3
        elif (stepno == ANALYSIS_STEP4_END):
            no = 4
        elif (stepno == ANALYSIS_FINISH):
            no = 5
        else:
            no = 0

        if no > 0:
            sql = 'update sample_tb set Analysis_StepNo = {0}, Analysis_Step{1}Time = "{2}" where Id = {3}'.format(stepno, no, datetime.today().strftime("%Y/%m/%d %H:%M:%S"), self.sampleno)
        else:
            sql = 'update sample_tb set Analysis_StepNo = {0}, Analysis_Step{1}Time = "{2}" where Id = {3}'.format(stepno, 1, datetime.today().strftime("%Y/%m/%d %H:%M:%S"), self.sampleno)
        self.mysql_curs.execute(sql)
        self.mysql_conn.commit()

    def SeqChange(self, Ref, Alt):
        if ((len(Ref) == 0) or (len(Alt) == 0)):
            rt = ['', '']
        elif (len(Ref) < len(Alt)):
            rt = [Ref[:1], Alt.rstrip(Ref[1:])]
        elif (len(Ref) > len(Alt)):
            rt = [Ref.rstrip(Alt[1:]), Alt[:1]]
        elif (len(Ref) == len(Alt)):
            rt = [Ref, Alt]
        return rt

    def SetSpeciesVal(self, sType, fname):  # species prediction  value,  stype: 1=S, 2=S1
        rt = ''
        
        if not os.path.isfile(fname):
            return rt

        if (sType == SPECIES_PRED_S1):   # In case of S1, add S if present
            sql = 'SELECT count(*) FROM species_tb where sample_id = {0} and stype = {1}'.format(self.sampleno, SPECIES_PRED_S)
            self.mysql_curs.execute(sql)
            rows = self.mysql_curs.fetchall()
            if (rows[0][0] == 0):    
                return rt

        
        f = open(fname, 'rt')
        for row in f:
            s = row.split('\t')
            if ((len(s) == 7) and (s[0] != 'name')):
                stm = datetime.today().strftime("%Y/%m/%d %H:%M:%S")
                sql = 'INSERT INTO species_tb(created_at,updated_at,sample_id, stype, sname, map_read, map_rate, user_id)VALUES("{5}","{5}",{0},{1},"{2}",{3},{4},{6})'.format(
                    self.sampleno, sType, s[0], s[5], s[6].strip(), stm, self.userno)
                self.mysql_curs.execute(sql)

        self.mysql_conn.commit()
        f.close
        

    def SetRawTrimFASTQ_SpikeIn(self):
        sname = self.tempsub_path[0]+self.sampleno+'.cutadapt.json'
        if not os.path.isfile(sname):
            return
        with open(sname) as f:
            js = json.load(f)
            rawRD = js['read_counts']['input']*2
            rawBS = js['basepair_counts']['input']
            trimRD = js['read_counts']['output']*2
            trimBS = js['basepair_counts']['output']
        f.close

        sname = [self.tempsub_path[1]+self.sampleno+'_Filtered_R1_fastqc/fastqc_data.txt',
                 self.tempsub_path[1]+self.sampleno+'_Filtered_R2_fastqc/fastqc_data.txt']

        q30 = 0
        for sr, sn in enumerate(sname):
            ck = False
            if os.path.isfile(sn):
                f = open(sn, 'rt')
                
                for r, row in enumerate(f):
                    s = row.split('\t')

                    if (ck and (len(s) == 2) and (s[0] != '#Quality')):
                        i = int(float(s[0].strip()))
                        if (i >= 30):
                            q30 = q30 + int(float(s[1].strip()))
                    elif ((not ck) and (s[0] == '>>Per sequence quality scores')):
                        ck = True
                    elif (ck and (s[0].strip() == '>>END_MODULE')):
                        break
                        
                f.close
        rawQ30 = q30/rawRD
        trimQ30 = q30/trimRD
        
        sql = 'update sample_tb set Analysis_RawFastQRead = {0}, Analysis_RawFastQBase = {1}, Analysis_RawFastQ30 = {2},\
            Analysis_TrimFastQRead = {3}, Analysis_TrimFastQBase = {4}, Analysis_TrimFastQ30 = {5},\
            Analysis_SpikeMapRead1 = {6}, Analysis_SpikeMapRead2 = {7}, Analysis_SpikeMapRead3 = {8}\
            where Id = {9}'.format(rawRD, rawBS, rawQ30, trimRD, trimBS, trimQ30, self.spikein_depth[0], self.spikein_depth[1], self.spikein_depth[2], self.sampleno)
        self.mysql_curs.execute(sql)
        self.mysql_conn.commit()

    def SetSpeciesPrediction(self):
        sql = 'SELECT b.sname, a.mx, b.map_read, b.map_rate FROM \
            (select sum(map_read)AS mx from species_tb WHERE sample_id = {0} AND stype = {1}) AS a,\
            (SELECT * FROM species_tb WHERE sample_id = {0} and  map_read = (SELECT MAX(map_read) FROM species_tb WHERE sample_id = {0} AND stype = {1})) AS b\
            LIMIT 1'.format(self.sampleno, 1)
        self.mysql_curs.execute(sql)
        rows = self.mysql_curs.fetchall()
        if (self.mysql_curs.rowcount == 1):
            na = rows[0][0]
            rd = [int(rows[0][1]), rows[0][2], rows[0][3]]
        else:
            na = ''
            rd = [0, 0, 0]

        sql = 'update sample_tb set Analysis_SpeciesPredName = "{0}", Analysis_SpeciesPredMapTot = {1}, \
            Analysis_SpeciesPredMapRead = {2},Analysis_SpeciesPredMapRate = {3}, Report_Species = "{0}" where Id = {4}'\
            .format(na, rd[0], rd[1], rd[2], self.sampleno)
        self.mysql_curs.execute(sql)
        self.mysql_conn.commit()

    def SetAlignmentH37Rv(self):    # Alignment to the reference genome (H37Rv)
        fname = self.tempsub_path[3]+self.sampleno+'_dup_removed.whole.stats'
        if not os.path.isfile(fname):
            return

        brv = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        f = open(fname, 'rt')
        for row in f:
            s = row.split('\t')
            if ((len(s) == 3) and (s[1] == 'sequences:')):
                # Host genome (human) filtered reads
                brv[0] = int(s[2].strip())
            elif ((len(s) == 3) and (s[1] == 'reads mapped:')):
                brv[3] = int(s[2].strip())      # Mapped reads (total)
            elif ((len(s) == 3) and (s[1] == 'average length:')):
                brv[5] = int(s[2].strip())      # Read length (mean)
            elif ((len(s) == 3) and (s[1] == 'insert size average:')):
                brv[6] = float(s[2].strip())    # Insert size (mean)
            elif ((len(s) == 3) and (s[1] == 'average quality:')):
                brv[7] = float(s[2].strip())    # Base quality (mean)
            elif (len(s) > 10):
                break
        f.close()

        fname = self.tempsub_path[3]+self.sampleno+'_dup_removed.out'
        if not os.path.isfile(fname):
            return
        f = open(fname, 'rt')
        for row in f:
            s = row.split(':')
            if (s[0] == 'DUPLICATE TOTAL'):
                brv[1] = int(s[1].strip())      # Duplicated reads
        f.close

        fname = self.tempsub_path[3]+self.sampleno+'.MAPQ'
        if not os.path.isfile(fname):
            return
        f = open(fname, 'rt')
        brv[8] = float(f.readline())           # Mapping quality (mean)
        f.close

        brv[2] = brv[1]/(brv[0]+brv[1])         # Duplication rate
        brv[4] = brv[3]/brv[0]                  # Mapped rate (total)

        sql = 'UPDATE sample_tb set Analysis_AlignHostGenomeRead={0}, Analysis_AlignDupRead={1}, Analysis_AlignDupRate={2}, Analysis_AlignMapReadTot={3}, Analysis_AlignMapRateTot={4},\
            Analysis_AlignReadLen={5}, Analysis_AlignInsert={6}, Analysis_AlignBaseQuality={7}, Analysis_AlignMapQuality={8}, Analysis_AlignMapReadTarget={9}, Analysis_AlignMapRateTarget={10},\
            Analysis_AlignCoverage={11}, Analysis_Align1xCoverage={12}, Analysis_Align50xCoverage={13}, Analysis_Align100xCoverage={14} where id={15} '\
            .format(brv[0], brv[1], brv[2], brv[3], brv[4], brv[5], brv[6], brv[7], brv[8], brv[9], brv[10], self.depth_average[0], self.depth_average[1], self.depth_average[2], self.depth_average[3], self.sampleno)
        self.mysql_curs.execute(sql)
        self.mysql_conn.commit()

    def SetQualityControl(self):    # QC
        sql = 'SELECT (Analysis_RawFastQRead > 450000), (Analysis_TrimFastQ30 > 0.8), (((Analysis_SpikeMapRead1+Analysis_SpikeMapRead2+Analysis_SpikeMapRead3)/3)>200),\
            (Analysis_SpeciesPredMapTot>200),(Analysis_SpeciesPredMapRate>0.1),(Analysis_AlignCoverage>100) from sample_tb where id = {0}'.format(self.sampleno)
        self.mysql_curs.execute(sql)
        rows = self.mysql_curs.fetchall()
        if (len(rows) == 1):
            sql = 'UPDATE sample_tb set Analysis_QcTotReadFastQ={0}, Analysis_QcQ30ReadFastQ={1}, Analysis_QcAvgMapRead={2}, Analysis_QcMapReadSpecies={3},\
                Analysis_QcMapRateSpecies={4}, Analysis_QcCoverageDeep={5} where id={6}'.format(rows[0][0], rows[0][1], rows[0][2], rows[0][3], rows[0][4], rows[0][5], self.sampleno)
            self.mysql_curs.execute(sql)
            self.mysql_conn.commit()
    
    def GetAcidCount(self, ref):
        amino = 'Phe', 'Leu', 'Ser', 'Tyr', 'Cys', 'Trp', 'Pro', 'His', 'Gln', 'Arg', 'Lle', 'Met', 'Thr', 'Asn', 'Lys', 'Val', 'Ala', 'Asp', 'Glu', 'Gly'
        str = ''
        for s in ref:
            if s not in ['0','1','2','3','4','5','6','7','8','9']:
                str = str + s
            else:
                break
        cnt = 0
        for aa in amino:
            if(aa in str):
                cnt = cnt +1
        return cnt
        
        
    def SetDrag(self):
        # DB Excel file
        fname = self.tempsub_path[5]+self.sampleno+'.ann.tsv'
        if not os.path.isfile(fname):
            return
        
        ePos = [0,0]
        f = open(fname, 'rt')
        for r, rows in enumerate(f):
            s = rows.split('\t')
            k = s[9].strip().split(',')
                            
            if ((r > 0) and (len(s) == 10) and (len(k) == 4)):
                pos = int(s[0])
                seq = self.SeqChange(s[1], s[2])  # Who DB convert
                vty = s[4].split(',')[0]
                gen = s[5].split(',')[0]
                gid = s[6].split(',')[0]
                nuc = s[7].split(',')[0]
                aac = s[8].split(',')[0]
                dep = int(k[0])+int(k[1])+int(k[2])+int(k[3])
                frq = ((int(k[2])+int(k[3]))/dep)*100
                mat = 0
                w = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

                ck = False
                # If there are two or more Amino Acids, only the individual Seqs are registered. 
                # Otherwise, only the combined Seqs are registered and the individual Seqs are discarded.
                if ((len(s[1])==len(s[2])) and (len(s[1])>=2)): 
                    if self.GetAcidCount(aac) <= 1:
                        ePos = [pos, pos+(len(s[1])-1)]
                        ck = True
                    else:
                        ePos = [pos, pos]
                    
                if ck or (not inRange(pos, ePos[0], ePos[1]) or (len(s[1])==1) and (ePos[0]==ePos[1]) and (pos==ePos[0])):    # Exclusion from registration
                    # 1.WHO DB Comparison (Gene, Amino Acide Change) = Overlap level = Amino acid
                    if aac not in ['.','-','',' ']: # Exclusion from analysis
                        sql = 'SELECT Tier,AMK,BDQ,CAP,CFZ,DLM,EMB,ETO,INH,KAN,LFX,LZD,MFX,PZA,RIF,STM from who_tb WHERE (gene="{0}") AND (AminoAcid="{1}") order by Orderlev desc'.format(gen, aac)
                        self.mysql_curs.execute(sql)
                        row = self.mysql_curs.fetchone()
                        if (row != None) and len(row) > 0:
                            #mat = mat+2
                            mat = 2
                            for c, col in enumerate(row):
                                w[c] = col

                    # 2.WHO DB Comparison (Position, Ref, Alt)   =  Overlap level = Nucleotide
                    sql = 'SELECT Tier,AMK,BDQ,CAP,CFZ,DLM,EMB,ETO,INH,KAN,LFX,LZD,MFX,PZA,RIF,STM from who_tb where (StartPs={0}) and (Ref="{1}") and (Alt="{2}")'.format(s[0], seq[0], seq[1])
                    self.mysql_curs.execute(sql)
                    row = self.mysql_curs.fetchone()
                    if (row != None) and len(row) > 0:
                        #mat = 1
                        mat = mat+1
                        for c, col in enumerate(row):
                            w[c] = col
                            
                    stm = datetime.today().strftime("%Y/%m/%d %H:%M:%S")
                    sql = 'INSERT INTO result_tb(created_at,updated_at,Sample_Id, Position,Ref,Alt,Depth,VarAlleleFreq,VarType,Gene,GeneID,Necleotide,AminoAcid,\
                        Tier,AMK,BDQ,CAP,CFZ,DLM,EMB,ETO,INH,KAN,LFX,LZD,MFX, PZA,RIF,STM,OverlapLv,user_id) \
                        VALUES("{28}","{28}",{0},{1},"{2}","{3}",{4},{5},"{6}","{7}","{8}","{9}","{10}",{11},{12},{13},{14},{15},{16},{17},{18},{19},{20},{21},{22},{23},{24},{25},{26},{27},{29})'\
                        .format(self.sampleno, s[0], s[1], s[2], s[3], frq, vty, gen, gid, nuc, aac, w[0], w[1], w[2], w[3], w[4], w[5], w[6], w[7], w[8], w[9], w[10], w[11], w[12], w[13], w[14], w[15], mat, stm, self.userno)
                    
                    self.mysql_curs.execute(sql)

        self.mysql_conn.commit()
        f.close()
        
    def SetSpoligoType(self):
        # DB Excel file
        fname = self.tempsub_path[5]+self.sampleno+'.spologityping.out'
        if not os.path.isfile(fname):
            return

        lt = []
        f = open(fname, 'rt')
        for r, rows in enumerate(f):
            s = rows.split('\t')[-1].strip()
            try:
                a = int(s)
                if a == 0:
                    s = 'NONE'
            except:
                s = 'NONE'

            sql = 'update sample_tb set Report_Spligotype = "{0}" where Id = {1}'.format(s, self.sampleno)
            self.mysql_curs.execute(sql)
            self.mysql_conn.commit()
            break
        
        f.close()

    def SetLineageVal(self):  # Lineage maker
        fname = self.tempsub_path[5]+self.sampleno+'.vcf'

        if not os.path.isfile(fname):
            return

        ck = False
        smp = []
        f = open(fname, 'rt')
        for row in f:
            s = row.split('\t')
            if ((len(s) == 10) and (s[0] == '#CHROM')):
                ck = True
            elif(ck):
                smp.append({'Pos':int(s[1]),"Alt":s[4]})
                
        #make lineage seq
        seq = list(LINEAGE_SEQ[:])
        dc  = {}

        for s in smp:
            for item in LINEAGE_MARK:
                if item["Pos"] == s['Pos']:
                    seq[item['Idx']] = s['Alt']
                    break
                
        #compare lineage db        
        mklt = []
        for i, lt in enumerate(LINEAGE_DB):
            sdb = list(lt['Seq'])
            totcnt = 0
            matcnt = 0
            for j,s in enumerate(seq):
                if (s!='N')and(sdb[j]!='N'):
                    totcnt = totcnt + 1
                    if(s == sdb[j]):
                        matcnt = matcnt + 1
                        
            mklt.append({'Name':lt['ID'], 'TotCnt':totcnt, 'MatCnt': matcnt})
                    
        # Find the highest matcnt
        s = ''
        data = sorted(mklt, key= itemgetter('MatCnt', 'TotCnt'),reverse=True)
        
        for i,item in enumerate(data):
            if i==0:
                #s = "{0}[{1},{2}]".format(item['Name'], item['TotCnt'], item['MatCnt'])
                s = "{0}".format(item['Name'])
                c = item['MatCnt']
            elif item['MatCnt'] == c:
                #s = s+"/{0}[{1},{2}]".format(item['Name'], item['TotCnt'], item['MatCnt'])
                s = s+"/{0}".format(item['Name'])
            else:
                break
                
        sql = 'update sample_tb set Report_Lineage = "{0}" where Id = {1}'.format(s, self.sampleno)

        self.mysql_curs.execute(sql)
        self.mysql_conn.commit()
        f.close
        
    
    def CheckMtuberculosis(self): 
        rt = False
        
        if not os.path.isfile(self.tempsub_path[4]+self.sampleno+'.S.braken'):
            return rt
        
        f = open(self.tempsub_path[4]+self.sampleno+'.S.braken', 'rt')
        for row in f:
            s = row.split('\t')
            if ((len(s) == 7) and (s[0] != 'name')):
                rt = (s[0] == 'Mycobacterium tuberculosis')
                break
        return rt
        

        
    def step1(self):  # Step 01 : Preprocessing
        self.ErrorTriger = False
        
        # make output directory
        if os.path.isdir(self.tempdir):    # delete old data
            shutil.rmtree(self.tempdir)

        os.makedirs(self.tempdir)
        for s in self.tempsub_dir:
            os.makedirs(s)

        imagedata_path = '/home/jj/univ_myco_web/static/circos'
        if os.path.exists(imagedata_path+'/'+self.sampleno+'.png'):
            os.remove(imagedata_path+'/'+self.sampleno+'.png')
        if os.path.exists(imagedata_path+'/'+self.sampleno+'.jpg'):
            os.remove(imagedata_path+'/'+self.sampleno+'.jpg')
        
        # 파일 검사
        if (not os.path.isfile(self.r1Name)) or (not os.path.isfile(self.r2Name)):
            self.ErrorTriger = True
            raise
            
         
        # trimming
        stmp = ['cutadapt', '-a', 'AGATCGGAAGAGCACACGTCTGAACTCCAGTCAC', '-A', 'AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT', '-q', '20', '-m', '50', '-j', str(self.cpucnt),
                '--json='+self.tempsub_path[0]+self.sampleno+'.cutadapt.json',
                '-o', self.tempsub_path[0] + self.sampleno+'_Filtered_R1.fastq.gz',
                '-p', self.tempsub_path[0] + self.sampleno+'_Filtered_R2.fastq.gz',
                self.r1Name, self.r2Name]
        self.procrun(stmp, 200)

        # trimmed_data_fastqc
        stmp = ['fastqc', '--extract', '-o', self.tempsub_dir[1], self.r1Name, self.r2Name]
        self.procrun(stmp, 300)
        
        stmp = ['fastqc', '--extract', '-o', self.tempsub_dir[1],
                self.tempsub_path[0]+self.sampleno+'_Filtered_R1.fastq.gz',
                self.tempsub_path[0]+self.sampleno+'_Filtered_R2.fastq.gz']
        self.procrun(stmp, 300)
        
                
                
        if self.anaysiscfg['ReadMapping_IntralControlOP'] == 'True':   # Reads mapping to host genome (human) & Internal Control Option[On/off]
            stmp = self.toolpath+'bwa-0.7.17-r1198-dirty/bwa mem ' + self.refCustom_hg38_SpikeInpath+'/custom_hg38.fa ' +\
                self.tempsub_path[0]+self.sampleno+'_Filtered_R1.fastq.gz ' +\
                self.tempsub_path[0]+self.sampleno+'_Filtered_R2.fastq.gz | ' +\
                self.toolpath+'samtools-1.16.1/samtools view -b -o ' + \
                self.tempsub_path[2] + str(self.sampleno)+'.bam'
            self.procrun(stmp, 2500)

            stmp = [self.toolpath+'samtools-1.16.1/samtools', 'sort', '-@', str(self.cpucnt), self.tempsub_path[2] + self.sampleno+'.bam', '-o', self.tempsub_path[2]+self.sampleno+'_sorted.bam']
            self.procrun(stmp, 300)

            stmp = [self.toolpath+'samtools-1.16.1/samtools', 'fastq', '-f', '4',
                    self.tempsub_path[2]+self.sampleno + '_sorted.bam', '-1',
                    self.tempsub_path[2]+self.sampleno + '_HG_filtered_R1.fastq.gz', '-2',
                    self.tempsub_path[2]+self.sampleno + '_HG_filtered_R2.fastq.gz', '-0',
                    '/dev/null', '-s', '/dev/null', '-n']
            self.procrun(stmp, 300)

        self.SetStepTime(ANALYSIS_STEP1_END)  # 1step 

    def step2(self):        # kraken2
        if self.ErrorTriger:
            return
                            
        # Kraken2 Option[--db / --minimum-base-quality]    Braken option[--db / -r / -l / -t]
        stmp = ['kraken2', '--db', self.refMyoChaseIDDBdir, '--paired', '--threads', str(self.cpucnt), '--minimum-base-quality', self.anaysiscfg['Kraken2_minbaseQulity'],
                '--minimum-hit-groups', self.anaysiscfg['Kraken2_minhitGroups'], '--report-minimizer-data',
                '--report', self.tempsub_path[4]+self.sampleno+'.kreport',
                '--output', self.tempsub_path[4]+self.sampleno+'.kraken',
                '--use-names', self.tempsub_path[0]+self.sampleno+'_Filtered_R1.fastq.gz', self.tempsub_path[0]+self.sampleno+'_Filtered_R2.fastq.gz']
        self.procrun(stmp, 300)

        stmp = [self.toolpath+'Bracken/bracken', '-d', self.refMyoChaseIDDBdir,
                '-i', self.tempsub_path[4]+self.sampleno+'.kreport',
                '-o', self.tempsub_path[4]+self.sampleno+'.S.braken',
                '-r', self.anaysiscfg['Braken_OptionR'], '-l','S', '-t', '4']
        self.procrun(stmp, 300)

        self.MtuberculosisOK = False
        if os.path.isfile(self.tempsub_path[4]+self.sampleno+'.S.braken'):
            f = open(self.tempsub_path[4]+self.sampleno+'.S.braken', 'rt')
            for row in f:
                s = row.split('\t')
                if ((len(s) == 7) and (s[0] != 'name')):
                    self.MtuberculosisOK = (s[0] == 'Mycobacterium tuberculosis')
                    break
        self.SetStepTime(ANALYSIS_STEP2_END)  # 2step 

    def filteredMerge(self):    # merge seq
        fname = self.tempsub_path[5]+self.sampleno + '_filtered.vcf'
        fnamesum = self.tempsub_path[5]+self.sampleno + '_filtered_sum.vcf'
        if not os.path.isfile(fname):
            return

        f = open(fname, 'rt')
        fsum = open(fnamesum, 'w')
        
        datack = False
        items = []
        pos = -1
                
        for rows in f:
            newitem = rows.split('\t')

            if(not datack):
                if(rows[:6] == "#CHROM"):
                    datack = True
                fsum.write(rows)
            elif(datack and (len(newitem) == 10)):
                if(pos+1 == int(newitem[1]))and (len(newitem[3])==1) and (len(newitem[4])==1):      # Ref and Alt are merged only when there is 1 consecutive letter
                    pos = pos+1
                elif(len(items)>0):
                    if(len(items)>=2):  # Save the merged
                        od = items[0][:]
                        for item in items[1:]:
                            od[3] = od[3] + item[3]
                            od[4] = od[4] + item[4]
                        
                        str = ""
                        for s in od:
                            str = str + ("\t" if str!="" else "")+s 
                        fsum.write(str)
                                
                    # Individual save
                    for item in items:
                        str = ""
                        for s in item:
                            str = str + ("\t" if str!="" else "")+s 
                        fsum.write(str)
                    items = []
                    pos = int(newitem[1])
                else:
                    pos = int(newitem[1])
                    
                items.append(newitem[:]) 
                    
        if(len(items)>=2):  # Save the merged
            od = items[0][:]
            for item in items[1:]:
                od[3] = od[3] + item[3]
                od[4] = od[4] + item[4]
            str = ""
            for s in od:
                str = str + ("\t" if str!="" else "")+s 
            fsum.write(str)

        # Individual save
        for item in items:
            str = ""
            for s in item:
                str = str + ("\t" if str!="" else "")+s 
            fsum.write(str)
        f.close()        
        fsum.close()
        
    def step3(self):        # Variants detection
        if self.ErrorTriger:
            return
        
        if self.anaysiscfg['ReadMapping_IntralControlOP'] == 'True':
            stmp = self.toolpath+'bwa-0.7.17-r1198-dirty/bwa mem -M -R "@RG\\tID:MycoChase\\tLB:MycoChase_Hyb\\tSM:'+self.sampleno+'\\tPL:MiSeq\\tPI:300" -t ' + str(self.cpucnt) + ' ' +\
                self.refMycobacterium_H37Rvpath+'NC_000962.3.fasta ' +\
                self.tempsub_path[2]+self.sampleno+'_HG_filtered_R1.fastq.gz ' +\
                self.tempsub_path[2]+self.sampleno+'_HG_filtered_R2.fastq.gz > ' +\
                self.tempsub_path[3]+self.sampleno+'.sam'
        else:
            stmp = self.toolpath+'bwa-0.7.17-r1198-dirty/bwa mem -M -R "@RG\\tID:MycoChase\\tLB:MycoChase_Hyb\\tSM:'+self.sampleno+'\\tPL:MiSeq\\tPI:300" -t ' + str(self.cpucnt) + ' ' +\
                self.refMycobacterium_H37Rvpath+'NC_000962.3.fasta ' +\
                self.tempsub_path[0]+self.sampleno+'_Filtered_R1.fastq.gz ' +\
                self.tempsub_path[0]+self.sampleno+'_Filtered_R2.fastq.gz > ' +\
                self.tempsub_path[3]+self.sampleno+'.sam'
        self.procrun(stmp, 300)

        stmp = self.toolpath+'samtools-1.16.1/samtools view -b ' + self.tempsub_path[3]+self.sampleno+'.sam > ' + self.tempsub_path[3]+self.sampleno+'.bam'
        self.procrun(stmp, 300)

        stmp = [self.toolpath+'samtools-1.16.1/samtools', 'sort', '-@', str(self.cpucnt), '-n', self.tempsub_path[3] + self.sampleno+'.bam', '-o', self.tempsub_path[3]+self.sampleno+'_sorted.bam']
        self.procrun(stmp, 300)

        stmp = [self.toolpath+'samtools-1.16.1/samtools', 'fixmate', '-@', str(self.cpucnt), '-m', self.tempsub_path[3] + self.sampleno+'_sorted.bam', self.tempsub_path[3]+self.sampleno+'_fixed.bam']
        self.procrun(stmp, 300)

        stmp = self.toolpath+'samtools-1.16.1/samtools sort -@ ' + str(self.cpucnt) + ' '+self.tempsub_path[3]+self.sampleno + '_fixed.bam > '+ self.tempsub_path[3] + self.sampleno+'_fixed_sorted.bam'
        self.procrun(stmp, 300)

        stmp = [self.toolpath+'samtools-1.16.1/samtools', 'markdup', '-@', str(self.cpucnt), '-r', '-f', self.tempsub_path[3]+self.sampleno+'_dup_removed.out', self.tempsub_path[3]+self.sampleno+'_fixed_sorted.bam',
                self.tempsub_path[3]+self.sampleno+'_dup_removed.bam']
        self.procrun(stmp, 300)

        stmp = [self.toolpath+'samtools-1.16.1/samtools', 'index', self.tempsub_path[3] + self.sampleno+'_dup_removed.bam']
        self.procrun(stmp, 300)

        # Reads mapping quality control
        stmp = self.toolpath+'samtools-1.16.1/samtools stats -@ '+str(self.cpucnt)+' -r '+self.refMycobacterium_H37Rvpath+'NC_000962.3.fasta ' +\
            self.tempsub_path[3]+self.sampleno+'_dup_removed.bam > ' +\
            self.tempsub_path[3]+self.sampleno+'_dup_removed.whole.stats'
        self.procrun(stmp, 300)

        stmp = [self.toolpath+'samtools-1.16.1/samtools', 'depth', '-aa', '-H', '-o', self.tempsub_path[3]+self.sampleno+'_dup_removed.depth', self.tempsub_path[3]+self.sampleno+'_dup_removed.bam']
        self.procrun(stmp, 300)

        f = open(self.tempsub_path[3]+self.sampleno+'_dup_removed.depth', 'rt')
        self.depth_average = [0, 0, 0, 0]
        self.depth_list = []
        self.depth_pos = []
        tot = 0
        for txt in f:
            s = txt.split('\t')
            if ((s[0] != '#CHROM') and (len(s) == 3)):
                pos = int(s[1].strip())
                k = int(s[2].strip())
                self.depth_pos.append(pos)
                self.depth_list.append(k)
                tot = tot + 1
                self.depth_average[0] = self.depth_average[0] + k
                if (k > 0):      # x1
                    self.depth_average[1] = self.depth_average[1] + 1
                if (k > 49):   # x50
                    self.depth_average[2] = self.depth_average[2] + 1
                if (k > 99):   # x100
                    self.depth_average[3] = self.depth_average[3] + 1

        if (tot > 0):
            self.depth_average[0] = self.depth_average[0]/tot
            self.depth_average[1] = (self.depth_average[1]/tot)*100
            self.depth_average[2] = (self.depth_average[2]/tot)*100
            self.depth_average[3] = (self.depth_average[3]/tot)*100
        f.close

        stmp = self.toolpath+"samtools-1.16.1/samtools view "+self.tempsub_path[3]+self.sampleno + "_dup_removed.bam | awk '{sum+=$5} END { print sum/NR}' > " + \
            self.tempsub_path[3]+self.sampleno+'.MAPQ'
        self.procrun(stmp, 300)

        # Spoligotyping        
        if self.anaysiscfg['ReadMapping_IntralControlOP'] == 'True':
            stmp = 'python2.7 '+self.toolpath+'SpoTyping-v2.1/SpoTyping-v2.1-commandLine/SpoTyping.py ' +\
                '-o ' + self.sampleno+'.spologityping.out ' +\
                '-O ' + self.tempsub_path[5] + ' --sorted ' +\
                self.tempsub_path[2]+self.sampleno+'_HG_filtered_R1.fastq.gz ' +\
                self.tempsub_path[2]+self.sampleno+'_HG_filtered_R2.fastq.gz'
        else:
            stmp = 'python2.7 '+self.toolpath+'SpoTyping-v2.1/SpoTyping-v2.1-commandLine/SpoTyping.py ' +\
                '-o ' + self.sampleno+'.spologityping.out ' +\
                '-O ' + self.tempsub_path[5] + ' --sorted ' +\
                self.tempsub_path[0]+self.sampleno+'_Filtered_R1.fastq.gz ' +\
                self.tempsub_path[0]+self.sampleno+'_Filtered_R1.fastq.gz'
        self.procrun(stmp, 300)
        
        # Variant calling and annotation Option bcftoos mpileup
        stmp = self.toolpath+'bcftools-1.16/bcftools mpileup -d 8000 -Ou --threads ' + str(self.cpucnt) + ' -f ' + self.refMycobacterium_H37Rvpath+'NC_000962.3.fasta ' +\
            self.tempsub_path[3]+self.sampleno+'_dup_removed.bam | '+self.toolpath+'bcftools-1.16/bcftools call -Ov --ploidy 1 --threads ' + str(self.cpucnt) + ' -v -c -o ' +\
            self.tempsub_path[5]+self.sampleno+'.vcf'
        self.procrun(stmp, 300)
        
        stmp = self.toolpath+'bcftools-1.16/bcftools view -e "QUAL {0} {1} || DP {2} {3}" '.format(self.anaysiscfg['BcfToolsQualitySymbol'],self.anaysiscfg['BcfToolsQualityValue'],self.anaysiscfg['BcfToolsDpSymbol'],self.anaysiscfg['BcfToolsDpValue']) +\
            self.tempsub_path[5] + self.sampleno+'.vcf > ' +\
            self.tempsub_path[5] + self.sampleno+'_filtered_1.vcf'
        self.procrun(stmp, 300)
        
        stmp = self.toolpath+'bcftools-1.16/bcftools mpileup -d 8000 -Ou --threads ' + str(self.cpucnt) + ' -f ' + self.refMycobacterium_H37Rvpath+'NC_000962.3.fasta ' +\
            self.tempsub_path[3]+self.sampleno+'_dup_removed.bam | ' + self.toolpath+'bcftools-1.16/bcftools call -Ov --ploidy 1 --threads ' + str(self.cpucnt) + ' -A -c -o '+\
            self.tempsub_path[5]+self.sampleno+'_A.vcf'
        self.procrun(stmp, 300)
            
        stmp = self.toolpath+'bcftools-1.16/bcftools filter -e N_ALT==0 ' + self.tempsub_path[5]+self.sampleno+'_A.vcf > ' + self.tempsub_path[5]+self.sampleno+'_N_ALT.vcf'
        self.procrun(stmp, 300)
            
        stmp = 'bedtools intersect -a ' + self.tempsub_path[5]+self.sampleno+'_N_ALT.vcf -b '+self.refpath+ '1_3teir.bed > ' + self.tempsub_path[5]+self.sampleno+'_1~3.vcf'
        self.procrun(stmp, 300)
        
        stmp = 'cat ' + self.tempsub_path[5]+self.sampleno+'_filtered_1.vcf '+ self.tempsub_path[5]+self.sampleno+'_1~3.vcf > ' + self.tempsub_path[5]+self.sampleno+'_merge.vcf'
        self.procrun(stmp, 300)
        
        stmp = '{ head -n 34 ' + self.tempsub_path[5]+self.sampleno+'_merge.vcf && tail -n +37 ' + self.tempsub_path[5]+self.sampleno + '_merge.vcf | uniq | sort -k 2 -n -u ; } > ' + self.tempsub_path[5]+self.sampleno + '_sorted_merge.vcf'
        self.procrun(stmp, 300)
        
        stmp = self.toolpath+'bcftools-1.16/bcftools view -e "DP <= 5 || (DP4[2]+DP4[3])/(DP4[0]+DP4[1]+DP4[2]+DP4[3]) < {0}" '.format(self.anaysiscfg['VAF_dp'])+self.tempsub_path[5]+self.sampleno+'_sorted_merge.vcf  > ' + self.tempsub_path[5]+self.sampleno + '_filtered.vcf'
        self.procrun(stmp, 300)
        
        self.filteredMerge()    # Merge seq
        
        stmp = '/opt/jdk-12.0.2/bin/java -Xmx8g -jar ' + self.toolpath+'/snpEff/snpEff.jar H37Rv ' + self.tempsub_path[5]+self.sampleno+\
            '_filtered_sum.vcf -v -noLof -noStats -ud {0} -no-downstream -no-utr > '.format(self.anaysiscfg['SnpEff_ud']) +\
            self.tempsub_path[5] + self.sampleno+'.ann.vcf'
        self.procrun(stmp, 300)

        stmp = '/opt/jdk-12.0.2/bin/java -Xmx8g -jar ' + self.toolpath+'/snpEff/SnpSift.jar extractFields -s "," -e "." ' +\
            self.tempsub_path[5]+self.sampleno+'.ann.vcf POS REF ALT DP "ANN[*].EFFECT" "ANN[*].GENE" "ANN[*].GENEID" "ANN[*].HGVS_C" "ANN[*].HGVS_P" DP4 > ' +\
            self.tempsub_path[5]+self.sampleno+'.ann.tsv'
        self.procrun(stmp, 300)


        
        # move bam file
        if os.path.exists(self.datapath + self.sampleno+'_dup_removed.bam'):
            os.remove(self.datapath + self.sampleno+'_dup_removed.bam')
        if os.path.exists(self.tempsub_path[3] + self.sampleno+'_dup_removed.bam'):
            shutil.move(self.tempsub_path[3] + self.sampleno+'_dup_removed.bam',self.datapath + self.sampleno+'_dup_removed.bam')

        if os.path.exists(self.datapath + self.sampleno+'_dup_removed.bam.bai'):
            os.remove(self.datapath + self.sampleno+'_dup_removed.bam.bai')
        if os.path.exists(self.tempsub_path[3] + self.sampleno+'_dup_removed.bam.bai'):
            shutil.move(self.tempsub_path[3] + self.sampleno+'_dup_removed.bam.bai',self.datapath + self.sampleno+'_dup_removed.bam.bai')
        
        if os.path.exists(self.datapath + self.sampleno+'_dup_removed.depth'):
            os.remove(self.datapath + self.sampleno+'_dup_removed.depth')
        if os.path.exists(self.tempsub_path[3]+self.sampleno+'_dup_removed.depth'):
            shutil.move(self.tempsub_path[3]+self.sampleno+'_dup_removed.depth',self.datapath + self.sampleno+'_dup_removed.depth')
                    
        self.SetStepTime(ANALYSIS_STEP3_END)  # 3step 
        

    def step4(self):        # file move
        if self.ErrorTriger:
            return
        
        # get sd        
        if len(self.depth_list) == 0:
            return 
    
        
        sd = numpy.std(self.depth_list)
        threshold = self.depth_average[0] - (3 * sd)
    
        # Target gene depth command
        # pncA > PZA, katG > INH, gid > STM, ethA > ETO, tlyA > CAP
        gene = ['katG','pncA','gid','ethA']
        for g in gene:
            stmp = self.toolpath+'samtools-1.16.1/samtools depth -aa -b {1}{2}.bed -H -o {0}{3}_{2}.depth {0}{3}_dup_removed.bam'.format(self.datapath, self.refpath, g, self.sampleno)
            self.procrun(stmp, 300)
            
            fn = '{0}{2}_{1}.depth'.format(self.datapath, g, self.sampleno)
            f = open(fn, 'rt')
            datas = f.readlines()
            f.close()
            
            start_pos_list = []
            end_pos_list = []
            count = 0

            for row in datas[1:]:
                v = row.strip().split('\t')
                if(len(v) != 3):
                    continue
                
                if self.depth_average[0]>=100 and (float(v[2]) < threshold or float(v[2])<=10):
                    if not start_pos_list:
                        start_pos_list.append(v[1])
                    end_pos_list.append(v[1])
                    count += 1
                else:
                    if count >= 50:
                        spos = start_pos_list[0]
                        epos = end_pos_list[-1]
                        stm = datetime.today().strftime("%Y/%m/%d %H:%M:%S")
                        sql = 'INSERT INTO targetgenedeletion_tb(created_at,updated_at,Sample_Id,user_id,posmin,posmax,gene) \
                            VALUES("{0}","{0}",{1},{2},{3},{4},"{5}")'.format(stm, self.sampleno, self.userno, spos, epos, g)
                        self.mysql_curs.execute(sql)

                    start_pos_list = []
                    end_pos_list = []
                    count = 0

            if start_pos_list and end_pos_list:
                if len(end_pos_list) >= 50:
                    spos = start_pos_list[0]
                    epos = end_pos_list[-1]
                    stm = datetime.today().strftime("%Y/%m/%d %H:%M:%S")
                    sql = 'INSERT INTO targetgenedeletion_tb(created_at,updated_at,Sample_Id,user_id,posmin,posmax,gene) \
                        VALUES("{0}","{0}",{1},{2},{3},{4},"{5}")'.format(stm, self.sampleno, self.userno, spos, epos, g)
                    self.mysql_curs.execute(sql)
                 
        self.mysql_conn.commit()                 

        self.SetStepTime(ANALYSIS_STEP4_END)  # 5step
        
        
    def finish(self):       # finish processing
        if self.ErrorTriger:
            return
        
        self.SetSpeciesVal(SPECIES_PRED_S, self.tempsub_path[4]+self.sampleno+'.S.braken')
        self.SetSpeciesVal(SPECIES_PRED_S1, self.tempsub_path[4]+self.sampleno+'.S1.braken')
        self.SetRawTrimFASTQ_SpikeIn()
        self.SetSpeciesPrediction()
        self.SetAlignmentH37Rv()
        self.SetQualityControl()
        self.SetDrag()
        self.SetSpoligoType()
        self.SetLineageVal()
        self.matchCirTb()
        self.SetStepTime(ANALYSIS_FINISH)
         
        print("==Finish==")

    def GetConfigOption(self):     # get Analsys Config option
        self.anaysiscfg = {'ReadMapping_IntralControlOP': 'True',
                            'refDB':'WTO_DB_20220821',
                            'Kraken2_minbaseQulity': '1',
                            'Kraken2_minhitGroups': '3',
                            'Braken_OptionR': '100',
                            'BcfToolsQualitySymbol': '<=',
                            'BcfToolsQualityValue': '100',
                            'BcfToolsDpSymbol': '<=',
                            'BcfToolsDpValue': '50',
                            'SnpEff_ud': '1000',
                            'VAF_dp':'3'    # VAF Value : 3 = 3% = 0.03
                            }
                
        sql = 'SELECT param, val FROM config_tb where(user_id = {0})'.format(self.userno)
        self.mysql_curs.execute(sql)
        rows = self.mysql_curs.fetchall()
        if (self.mysql_curs.rowcount > 0):
            for row in rows:
                self.anaysiscfg[row[0]] = row[1]
                
        self.anaysiscfg['VAF_dp'] = str(int(self.anaysiscfg['VAF_dp']) / 100)    # example : 3 = 3% = 0.03
        
    def Anaylysis(self):
        if self.sampleno == '0':    # check data
            time.sleep(0.5)
            return
        
        # delete old data 
        sql = 'DELETE FROM result_tb WHERE sample_id = {0}'.format(self.sampleno)
        self.mysql_curs.execute(sql)
        sql = 'DELETE FROM species_tb WHERE sample_id = {0}'.format(self.sampleno)
        self.mysql_curs.execute(sql)
        sql = 'DELETE FROM targetgenedeletion_tb WHERE sample_id = {0} '.format(self.sampleno)
        self.mysql_curs.execute(sql)
        self.mysql_conn.commit()
        
        self.SetStepTime(ANALYSIS_RUNNIG)
        self.GetConfigOption()  # get config option
        self.step1()    # step 1 - Preprocessing
        self.step2()    # step 2 - Species identification
        if self.MtuberculosisOK == True:
            self.step3()    # step 3 - Variants detection
            self.step4()    # step 4 - move file
        self.finish()   # result

    def FileDateCheck(self, day=0):    
        if (datetime.now().date() - self.checktm).days == 0:   # Check once a day
            return
                
        self.checktm = datetime.now().date()    # date time check
        
        na = (datetime.now()+timedelta(days=day)).date()
        stm = na.strftime("%Y/%m/%d 23:59:59")
        
        # delete db data
        sql = 'DELETE FROM data_tb WHERE created_at < "{0}"'.format(stm)
        self.mysql_curs.execute(sql)
        sql = 'DELETE FROM result_tb WHERE created_at < "{0}"'.format(stm)
        self.mysql_curs.execute(sql)
        sql = 'DELETE FROM sample_tb WHERE created_at < "{0}"'.format(stm)
        self.mysql_curs.execute(sql)
        sql = 'DELETE FROM species_tb WHERE created_at < "{0}"'.format(stm)
        self.mysql_curs.execute(sql)
        sql = 'DELETE FROM targetgenedeletion_tb WHERE created_at < "{0}"'.format(stm)
        self.mysql_curs.execute(sql)
        self.mysql_conn.commit()
        
        flist = os.listdir(MycoClass.datapath)
        for fl in flist:
            ct = datetime.fromtimestamp(os.path.getctime(MycoClass.datapath+fl)).date()

            if ct < na:
                os.remove(MycoClass.datapath+fl)
                print('Delete : ', MycoClass.datapath+fl, ct)

if __name__ == '__main__':
    print("====================================")
    print("  START UNIV MYCOANALYZER V1.04")
    print("====================================")

    MycoClass = AnalyzerClass()
    MycoClass.ConnectMysqlDB('localhost', 3306, 'db', 'user', 'passwd')    # Univ myco db

    while True:
        MycoClass.GetData()
        MycoClass.FileDateCheck(-90)    # Delete data older than 90 days
        try:
            MycoClass.Anaylysis()
        except Exception as e:
            MycoClass.SetStepTime(ANALYSIS_ERROR)
            print('ERROR ' + traceback.format_exc())
